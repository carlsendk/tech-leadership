---
import Layout from '../../layouts/Layout.astro';
import ContentCard from '../../components/ContentCard.astro';
import FilterBox from '../../components/FilterBox.astro';
import { getCollection } from 'astro:content';

// Get all wiki entries, excluding drafts
const allWikiEntries = await getCollection('wiki', ({ data }) => {
  return !data.draft;
});

// Get all categories and tags
const categories = [...new Set(allWikiEntries.map(entry => entry.data.category))].sort();
const allTags = [...new Set(allWikiEntries.flatMap(entry => entry.data.tags))].sort();

// Get query parameters for filtering
const { searchParams } = Astro.url;
const categoryFilter = searchParams.get('category');
const tagFilter = searchParams.get('tag');

// Decode the category filter if it exists
const decodedCategoryFilter = categoryFilter ? decodeURIComponent(categoryFilter) : null;

// Filter entries based on the query parameters
let filteredEntries = allWikiEntries;
if (decodedCategoryFilter) {
  filteredEntries = filteredEntries.filter(entry => entry.data.category === decodedCategoryFilter);
}
if (tagFilter) {
  filteredEntries = filteredEntries.filter(entry => entry.data.tags.includes(tagFilter));
}

// Group entries by category
const entriesByCategory = filteredEntries.reduce((acc, entry) => {
  const category = entry.data.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(entry);
  return acc;
}, {} as Record<string, typeof filteredEntries>);

// Sort entries within each category by order if available, then by title
Object.values(entriesByCategory).forEach(entries => {
  entries.sort((a, b) => {
    if (a.data.order !== undefined && b.data.order !== undefined) {
      return a.data.order - b.data.order;
    }
    return a.data.title.localeCompare(b.data.title);
  });
});

// Calculate statistics
const totalArticles = allWikiEntries.length;
const totalCategories = categories.length;
const totalTags = allTags.length;
---

<Layout title="Wiki | Knowledge Base" description="Explore our wiki articles and documentation resources">
  <div class="max-w-7xl mx-auto px-4 py-10 sm:px-6 lg:px-8">
    <!-- Hero section -->
    <div class="bg-gradient-to-br from-primary-900 to-primary-950 rounded-2xl p-8 mb-12 text-white">
      <h1 class="text-4xl font-bold mb-4">Wiki</h1>
      <p class="text-xl text-primary-200 mb-6">
        Explore our collection of documentation and resources
      </p>
      
      <!-- Statistics -->
      <div class="grid grid-cols-3 gap-4 max-w-lg">
        <div class="text-center">
          <div class="text-3xl font-bold text-accent-400">{totalArticles}</div>
          <div class="text-primary-300 text-sm">Articles</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-accent-400">{totalCategories}</div>
          <div class="text-primary-300 text-sm">Categories</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-accent-400">{totalTags}</div>
          <div class="text-primary-300 text-sm">Tags</div>
        </div>
      </div>
    </div>
    
    <!-- Filter box -->
    <div class="mb-8">
      <FilterBox
        title="Browse Wiki Articles"
        categories={categories}
        activeCategory={decodedCategoryFilter}
        tags={allTags}
        activeTag={tagFilter}
        baseUrl="/wiki"
      />
    </div>
    
    <!-- Content grid -->
    {Object.keys(entriesByCategory).length > 0 ? (
      Object.entries(entriesByCategory).map(([category, entries]) => (
        <div class="mb-12">
          <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-6">
            {category}
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {entries.map(entry => (
              <ContentCard
                title={entry.data.title}
                description={entry.data.description}
                url={`/wiki/${entry.slug}`}
                tags={entry.data.tags}
                category={entry.data.category}
                isWiki={true}
              />
            ))}
          </div>
        </div>
      ))
    ) : (
      <div class="text-center py-12">
        <h3 class="text-lg font-medium text-primary-900 dark:text-primary-100">
          No wiki entries found
        </h3>
        <p class="mt-2 text-primary-600 dark:text-primary-300">
          {decodedCategoryFilter 
            ? `There are no wiki entries in the "${decodedCategoryFilter}" category.` 
            : 'There are no wiki entries available.'}
        </p>
        {decodedCategoryFilter && (
          <a href="/wiki" class="mt-4 inline-block text-accent-600 dark:text-accent-400 hover:underline">
            View all wiki entries
          </a>
        )}
      </div>
    )}
  </div>
</Layout>