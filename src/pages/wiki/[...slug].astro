---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import WikiLayout from "../../layouts/WikiLayout.astro";
import CategoryLayout from "../../layouts/CategoryLayout.astro";
import SubcategoryLayout from "../../layouts/SubcategoryLayout.astro";

interface Props {
  entry: CollectionEntry<"wiki">;
}

export async function getStaticPaths() {
  const wikiEntries = await getCollection(
    "wiki",
    ({ data }: CollectionEntry<"wiki">) => {
      return !data.draft;
    },
  );

  return wikiEntries.map((entry: CollectionEntry<"wiki">) => {
    const generatedSlug = entry.slug.split(/[/\\]/).join("/");

    return {
      params: {
        slug: generatedSlug,
      },
      props: { entry },
    };
  });
}

const { entry } = Astro.props as Props;
const { Content, headings } = await entry.render();

// Determine layout based on displayMode
const displayMode = entry.data.displayMode || 'content';
const isCategoryDisplay = displayMode === 'category';
const isSubcategoryDisplay = displayMode === 'subcategory';

// Fallback to old logic if no displayMode is specified
const isSubcategoryIndex = entry.data.isIndex && entry.data.subcategory;
---

{
  isCategoryDisplay ? (
    <CategoryLayout
      title={entry.data.title}
      description={entry.data.description}
      tags={entry.data.tags}
      category={entry.data.category}
      entry={entry}
      heroImage={entry.data.heroImage || entry.data.image}
      heroImageAlt={entry.data.heroImageAlt}
    >
      <div class="prose-content" data-title={entry.data.title}>
        <Content />
      </div>
      
      <script>
        // Auto-skip first H1 heading if it's similar to the title
        function autoSkipFirstH1() {
          const contentDiv = document.querySelector('.prose-content[data-title]');
          if (!contentDiv) return;
          
          const title = contentDiv.getAttribute('data-title') || '';
          const firstH1 = contentDiv.querySelector('h1');
          
          if (!firstH1 || !title) return;
          
          const h1Text = firstH1.textContent?.trim() || '';
          
          const normalizeText = (text) => {
            return text.toLowerCase()
              .replace(/[^\w\s]/g, ' ')
              .replace(/\s+/g, ' ')
              .trim();
          };
          
          const normalizedH1 = normalizeText(h1Text);
          const normalizedTitle = normalizeText(title);
          
          const areSimilar = normalizedH1 === normalizedTitle || 
                            (normalizedH1.includes(normalizedTitle) && normalizedTitle.length > 10) ||
                            (normalizedTitle.includes(normalizedH1) && normalizedH1.length > 10);
          
          if (areSimilar) {
            firstH1.remove();
          }
        }
        
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', autoSkipFirstH1);
        } else {
          autoSkipFirstH1();
        }
      </script>
    </CategoryLayout>
  ) : isSubcategoryDisplay ? (
    <SubcategoryLayout
      title={entry.data.title}
      description={entry.data.description}
      tags={entry.data.tags}
      category={entry.data.category}
      subcategory={entry.data.subcategory}
      entry={entry}
      heroImage={entry.data.heroImage || entry.data.image}
      heroImageAlt={entry.data.heroImageAlt}
    >
      <div class="prose-content" data-title={entry.data.title}>
        <Content />
      </div>
      
      <script>
        // Auto-skip first H1 heading if it's similar to the title
        function autoSkipFirstH1() {
          const contentDiv = document.querySelector('.prose-content[data-title]');
          if (!contentDiv) return;
          
          const title = contentDiv.getAttribute('data-title') || '';
          const firstH1 = contentDiv.querySelector('h1');
          
          if (!firstH1 || !title) return;
          
          const h1Text = firstH1.textContent?.trim() || '';
          
          const normalizeText = (text) => {
            return text.toLowerCase()
              .replace(/[^\w\s]/g, ' ')
              .replace(/\s+/g, ' ')
              .trim();
          };
          
          const normalizedH1 = normalizeText(h1Text);
          const normalizedTitle = normalizeText(title);
          
          const areSimilar = normalizedH1 === normalizedTitle || 
                            (normalizedH1.includes(normalizedTitle) && normalizedTitle.length > 10) ||
                            (normalizedTitle.includes(normalizedH1) && normalizedH1.length > 10);
          
          if (areSimilar) {
            firstH1.remove();
          }
        }
        
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', autoSkipFirstH1);
        } else {
          autoSkipFirstH1();
        }
      </script>
    </SubcategoryLayout>
  ) : isSubcategoryIndex && entry.data.subcategory ? (
    <SubcategoryLayout
      title={entry.data.title}
      description={entry.data.description}
      tags={entry.data.tags}
      category={entry.data.category}
      subcategory={entry.data.subcategory}
      entry={entry}
      heroImage={entry.data.heroImage || entry.data.image}
      heroImageAlt={entry.data.heroImageAlt}
    >
      <div class="prose-content" data-title={entry.data.title}>
        <Content />
      </div>
      
      <script>
        // Auto-skip first H1 heading if it's similar to the title
        function autoSkipFirstH1() {
          const contentDiv = document.querySelector('.prose-content[data-title]');
          if (!contentDiv) return;
          
          const title = contentDiv.getAttribute('data-title') || '';
          const firstH1 = contentDiv.querySelector('h1');
          
          if (!firstH1 || !title) return;
          
          const h1Text = firstH1.textContent?.trim() || '';
          
          const normalizeText = (text) => {
            return text.toLowerCase()
              .replace(/[^\w\s]/g, ' ')
              .replace(/\s+/g, ' ')
              .trim();
          };
          
          const normalizedH1 = normalizeText(h1Text);
          const normalizedTitle = normalizeText(title);
          
          const areSimilar = normalizedH1 === normalizedTitle || 
                            (normalizedH1.includes(normalizedTitle) && normalizedTitle.length > 10) ||
                            (normalizedTitle.includes(normalizedH1) && normalizedH1.length > 10);
          
          if (areSimilar) {
            firstH1.remove();
          }
        }
        
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', autoSkipFirstH1);
        } else {
          autoSkipFirstH1();
        }
      </script>
    </SubcategoryLayout>
  ) : (
    <WikiLayout
      title={entry.data.title}
      description={entry.data.description}
      tags={entry.data.tags}
      category={entry.data.category}
      headings={headings}
      entry={entry}
      heroImage={entry.data.heroImage || entry.data.image}
      heroImageAlt={entry.data.heroImageAlt}
    >
      <div class="prose-content" data-title={entry.data.title}>
        <Content />
      </div>
      
      <script>
        // Auto-skip first H1 heading if it's similar to the title
        function autoSkipFirstH1() {
          const contentDiv = document.querySelector('.prose-content[data-title], .prose[data-title]');
          if (!contentDiv) return;
          
          const title = contentDiv.getAttribute('data-title') || '';
          const firstH1 = contentDiv.querySelector('h1');
          
          if (!firstH1 || !title) return;
          
          const h1Text = firstH1.textContent?.trim() || '';
          
          // Normalize both texts for comparison
          const normalizeText = (text) => {
            return text.toLowerCase()
              .replace(/[^\w\s]/g, ' ')
              .replace(/\s+/g, ' ')
              .trim();
          };
          
          const normalizedH1 = normalizeText(h1Text);
          const normalizedTitle = normalizeText(title);
          
          // Check if they're similar
          const areSimilar = normalizedH1 === normalizedTitle || 
                            (normalizedH1.includes(normalizedTitle) && normalizedTitle.length > 10) ||
                            (normalizedTitle.includes(normalizedH1) && normalizedH1.length > 10);
          
          if (areSimilar) {
            firstH1.remove();
          }
        }
        
        // Run with slight delay to ensure content is fully rendered
        function runAutoSkip() {
          setTimeout(autoSkipFirstH1, 100);
        }
        
        // Run on page load
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', runAutoSkip);
        } else {
          runAutoSkip();
        }
      </script>
    </WikiLayout>
  )
}
