---
import Layout from '../../layouts/Layout.astro';
import type { GetStaticPaths } from 'astro';

export const getStaticPaths: GetStaticPaths = async () => {
  // Define the assessment routes
  return [
    { params: { id: 'engineering-practices' } },
    { params: { id: 'cloud-native-maturity' } },
  ];
};

const { id } = Astro.params;

// Determine assessment type based on ID
const assessmentType = id === 'cloud-native-maturity' ? 'matrix' : 'questionnaire';
const assessmentTitle = id === 'engineering-practices' 
  ? 'Engineering Practices Maturity Assessment'
  : 'Cloud Native Maturity Matrix';
---

<Layout 
  title={`${assessmentTitle} - Tech Leadership Hub`}
  description={`Take the ${assessmentTitle} to evaluate your organization's maturity and receive personalized recommendations.`}
>
  <main class="min-h-screen bg-primary-50 dark:bg-primary-900">
    <!-- Header -->
    <div class="bg-white dark:bg-primary-800 shadow-sm border-b border-primary-200 dark:border-primary-700">
      <div class="container mx-auto px-4 py-6">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-6">
            <a 
              href="/tech-leadership/assessments/" 
              class="inline-flex items-center text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors font-medium"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Back to Assessments
            </a>
            <div class="h-8 w-px bg-primary-300 dark:bg-primary-600"></div>
            <div>
              <h1 class="text-2xl font-bold text-primary-900 dark:text-primary-100">
                {assessmentTitle}
              </h1>
              <p class="text-sm text-primary-600 dark:text-primary-400 mt-1">
                {assessmentType === 'questionnaire' ? 'Section-based evaluation' : 'Matrix-based evaluation'}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Assessment Content -->
    <div class="container mx-auto px-4 py-8">
      {assessmentType === 'questionnaire' ? (
        <div 
          id="direct-questionnaire"
          x-data="directQuestionnaireAssessment()"
          x-init="loadAssessment()"
        >
          <!-- Loading State -->
          <div x-show="isLoading" class="flex items-center justify-center p-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
            <span class="ml-3 text-primary-600 dark:text-primary-400">Loading assessment...</span>
          </div>

          <!-- Assessment Content -->
          <div x-show="!isLoading && currentAssessment && !showResults">
            <div class="max-w-4xl mx-auto">
              <!-- Progress Header -->
              <div class="mb-8">
                <div class="mb-4">
                  <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100" x-text="currentAssessment?.title"></h2>
                  <p class="text-primary-600 dark:text-primary-400 mt-2" x-text="currentAssessment?.description"></p>
                </div>
                
                <!-- Progress Bar -->
                <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
                  <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" :style="`width: ${getProgress()}%`"></div>
                </div>
                <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
                  <span x-text="`Section ${currentSectionIndex + 1} of ${currentAssessment?.sections?.length || 0}`"></span>
                  <span x-text="`${getProgress()}% complete`"></span>
                </div>
              </div>

              <!-- Current Section -->
              <div x-show="getCurrentSection()" class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-8">
                <div class="mb-6">
                  <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="getCurrentSection()?.title"></h3>
                  <p class="text-primary-600 dark:text-primary-300" x-text="getCurrentSection()?.description"></p>
                </div>

                <!-- Questions -->
                <div class="space-y-6">
                  <template x-for="question in getCurrentSection()?.questions || []" :key="question.id">
                    <div class="border-b border-primary-200 dark:border-primary-600 pb-6 last:border-b-0">
                      <div class="mb-4">
                        <label class="block text-lg font-medium text-primary-900 dark:text-primary-100 mb-2" x-text="question.text"></label>
                        <p x-show="question.helpText" class="text-sm text-primary-500 dark:text-primary-400" x-text="question.helpText"></p>
                      </div>
                      
                      <!-- Scale Question -->
                      <div x-show="question.type === 'scale'" class="space-y-4">
                        <div class="flex justify-between text-sm text-primary-600 dark:text-primary-300 mb-3">
                          <span class="font-medium" x-text="question.labels?.[0] || ''"></span>
                          <span class="font-medium" x-text="question.labels?.[question.labels.length - 1] || ''"></span>
                        </div>
                        <div class="grid grid-cols-5 gap-4 max-w-lg mx-auto">
                          <template x-for="value in Array.from({length: question.max - question.min + 1}, (_, i) => i + question.min)" :key="value">
                            <label class="flex flex-col items-center cursor-pointer group">
                              <input 
                                type="radio" 
                                :name="question.id"
                                :value="value"
                                @change="updateResponse(question.id, value)"
                                :checked="responses[question.id] == value"
                                class="sr-only"
                              />
                              <div 
                                class="w-14 h-14 rounded-full border-2 flex items-center justify-center transition-all duration-200 mb-2"
                                :class="responses[question.id] == value ? 'border-accent-600 bg-accent-600 text-white shadow-lg scale-105' : 'border-primary-300 dark:border-primary-600 group-hover:border-accent-400 group-hover:scale-105'"
                              >
                                <span class="text-sm font-semibold" x-text="value"></span>
                              </div>
                              <span class="text-xs text-center text-primary-500 dark:text-primary-400 leading-tight max-w-20 h-8 flex items-center justify-center" x-text="question.labels?.[value - question.min] || ''"></span>
                            </label>
                          </template>
                        </div>
                      </div>
                    </div>
                  </template>
                </div>

                <!-- Navigation -->
                <div class="flex justify-between mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
                  <button 
                    x-show="currentSectionIndex > 0"
                    @click="previousSection()"
                    class="flex items-center px-4 py-2 text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-200 transition-colors"
                  >
                    ← Previous Section
                  </button>
                  <div x-show="currentSectionIndex === 0"></div>
                  
                  <button 
                    x-show="currentSectionIndex < (currentAssessment?.sections?.length || 0) - 1"
                    @click="nextSection()"
                    :disabled="!isSectionComplete()"
                    class="flex items-center px-6 py-2 bg-accent-600 hover:bg-accent-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors"
                  >
                    Next Section →
                  </button>
                  
                  <button 
                    x-show="currentSectionIndex === (currentAssessment?.sections?.length || 0) - 1"
                    @click="completeAssessment()"
                    :disabled="!isSectionComplete()"
                    class="flex items-center px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors"
                  >
                    Complete Assessment
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Results Display -->
          <div x-show="showResults && assessmentResult" class="max-w-6xl mx-auto">
            <!-- Results Header -->
            <div class="text-center mb-12">
              <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Results</h1>
              <div class="max-w-2xl mx-auto">
                <h2 class="text-xl text-primary-600 dark:text-primary-400 mb-2" x-text="assessmentResult?.assessmentTitle"></h2>
                <p class="text-sm text-primary-500 dark:text-primary-400" x-text="`Completed on ${new Date(assessmentResult?.completedAt).toLocaleDateString()} • ${assessmentResult?.timeSpent || 0} minutes`"></p>
              </div>
            </div>

            <!-- Overall Score Section -->
            <div class="grid gap-8 lg:grid-cols-3 mb-12">
              <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
                <div class="text-center">
                  <div class="text-5xl font-bold text-accent-600 mb-3" x-text="getOverallScore()"></div>
                  <div class="text-xl text-primary-900 dark:text-primary-100 mb-2">Overall Score</div>
                  <div class="text-sm text-primary-600 dark:text-primary-300" x-text="getMaturityLevelText()"></div>
                </div>
              </div>
              
              <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
                <div class="text-center">
                  <div class="text-5xl font-bold text-green-600 mb-3" x-text="getCompletionPercentage()"></div>
                  <div class="text-xl text-primary-900 dark:text-primary-100 mb-2">Completion</div>
                  <div class="text-sm text-primary-600 dark:text-primary-300">Questions Answered</div>
                </div>
              </div>
              
              <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
                <div class="text-center">
                  <div class="text-5xl font-bold text-blue-600 mb-3" x-text="getHighestScoringSection()?.score || 0"></div>
                  <div class="text-xl text-primary-900 dark:text-primary-100 mb-2">Highest Area</div>
                  <div class="text-sm text-primary-600 dark:text-primary-300" x-text="getHighestScoringSection()?.title || 'N/A'"></div>
                </div>
              </div>
            </div>

            <!-- Section Breakdown -->
            <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8 mb-12">
              <h3 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-6">Section Breakdown</h3>
              
              <!-- Radar Chart -->
              <div class="grid gap-8 lg:grid-cols-2 mb-8">
                <div class="flex justify-center">
                  <div class="relative w-80 h-80">
                    <svg viewBox="0 0 200 200" class="w-full h-full">
                      <!-- Background grid -->
                      <defs>
                        <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                          <path d="M 40 0 L 0 0 0 40" fill="none" stroke="currentColor" stroke-width="0.5" class="text-primary-300 dark:text-primary-600" opacity="0.3"/>
                        </pattern>
                      </defs>
                      
                      <!-- Grid circles -->
                      <circle cx="100" cy="100" r="20" fill="none" stroke="currentColor" stroke-width="0.5" class="text-primary-300 dark:text-primary-600" opacity="0.3"/>
                      <circle cx="100" cy="100" r="40" fill="none" stroke="currentColor" stroke-width="0.5" class="text-primary-300 dark:text-primary-600" opacity="0.3"/>
                      <circle cx="100" cy="100" r="60" fill="none" stroke="currentColor" stroke-width="0.5" class="text-primary-300 dark:text-primary-600" opacity="0.3"/>
                      <circle cx="100" cy="100" r="80" fill="none" stroke="currentColor" stroke-width="0.5" class="text-primary-300 dark:text-primary-600" opacity="0.3"/>
                      
                      <!-- Radar chart data -->
                      <template x-for="(section, index) in getSectionScores()" :key="section.id">
                        <g>
                          <!-- Axis lines -->
                          <line 
                            x1="100" 
                            y1="100" 
                            :x2="100 + Math.cos((index * 2 * Math.PI / getSectionScores().length) - Math.PI/2) * 80" 
                            :y2="100 + Math.sin((index * 2 * Math.PI / getSectionScores().length) - Math.PI/2) * 80"
                            stroke="currentColor" 
                            stroke-width="0.5" 
                            class="text-primary-300 dark:text-primary-600"
                            opacity="0.5"
                          />
                          
                          <!-- Data points -->
                          <circle 
                            :cx="100 + Math.cos((index * 2 * Math.PI / getSectionScores().length) - Math.PI/2) * (section.score / 5) * 80" 
                            :cy="100 + Math.sin((index * 2 * Math.PI / getSectionScores().length) - Math.PI/2) * (section.score / 5) * 80"
                            r="4" 
                            fill="rgb(var(--color-accent-600))"
                            stroke="white"
                            stroke-width="2"
                          />
                          
                          <!-- Labels -->
                          <text 
                            :x="100 + Math.cos((index * 2 * Math.PI / getSectionScores().length) - Math.PI/2) * 90" 
                            :y="100 + Math.sin((index * 2 * Math.PI / getSectionScores().length) - Math.PI/2) * 90"
                            text-anchor="middle" 
                            dominant-baseline="middle" 
                            class="text-xs font-medium fill-current text-primary-700 dark:text-primary-300"
                            x-text="section.title.split(' ')[0]"
                          ></text>
                        </g>
                      </template>
                      
                      <!-- Connecting lines for radar area -->
                      <polygon 
                        :points="getSectionScores().map((section, index) => {
                          const angle = (index * 2 * Math.PI / getSectionScores().length) - Math.PI/2;
                          const x = 100 + Math.cos(angle) * (section.score / 5) * 80;
                          const y = 100 + Math.sin(angle) * (section.score / 5) * 80;
                          return x + ',' + y;
                        }).join(' ')"
                        fill="rgb(var(--color-accent-600))"
                        fill-opacity="0.2"
                        stroke="rgb(var(--color-accent-600))"
                        stroke-width="2"
                        stroke-linejoin="round"
                      />
                    </svg>
                  </div>
                </div>
                
                <!-- Legend -->
                <div class="flex flex-col justify-center">
                  <h4 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-4">Maturity Radar</h4>
                  <div class="space-y-3">
                    <template x-for="section in getSectionScores()" :key="section.id">
                      <div class="flex items-center justify-between">
                        <div class="flex items-center">
                          <div class="w-3 h-3 rounded-full bg-accent-600 mr-3"></div>
                          <span class="text-sm font-medium text-primary-900 dark:text-primary-100" x-text="section.title"></span>
                        </div>
                        <div class="text-right">
                          <span class="text-lg font-bold text-accent-600" x-text="section.score.toFixed(1)"></span>
                          <span class="text-sm text-primary-500 dark:text-primary-400">/5.0</span>
                        </div>
                      </div>
                    </template>
                  </div>
                </div>
              </div>
              
              <!-- Detailed breakdown -->
              <div class="space-y-6">
                <template x-for="section in getSectionScores()" :key="section.id">
                  <div class="border-b border-primary-200 dark:border-primary-600 pb-6 last:border-b-0">
                    <div class="flex items-center justify-between mb-4">
                      <div>
                        <h4 class="text-lg font-semibold text-primary-900 dark:text-primary-100" x-text="section.title"></h4>
                        <p class="text-sm text-primary-600 dark:text-primary-300" x-text="section.description"></p>
                      </div>
                      <div class="text-right">
                        <div class="text-2xl font-bold text-accent-600" x-text="section.score.toFixed(1)"></div>
                        <div class="text-sm text-primary-500 dark:text-primary-400">out of 5.0</div>
                      </div>
                    </div>
                    <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-3">
                      <div 
                        class="bg-accent-600 h-3 rounded-full transition-all duration-500" 
                        :style="`width: ${(section.score / 5) * 100}%`"
                      ></div>
                    </div>
                  </div>
                </template>
              </div>
            </div>

            <!-- Maturity Level Assessment -->
            <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8 mb-12">
              <h3 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-6">Maturity Level Assessment</h3>
              <div class="grid gap-6 md:grid-cols-2">
                <div>
                  <h4 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-3">Current Level</h4>
                  <div class="bg-primary-50 dark:bg-primary-700 rounded-lg p-4">
                    <div class="text-xl font-bold text-accent-600 mb-2" x-text="getMaturityLevelText()"></div>
                    <p class="text-sm text-primary-600 dark:text-primary-300" x-text="getMaturityDescription()"></p>
                  </div>
                </div>
                <div>
                  <h4 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-3">Score-Based Recommendations</h4>
                  <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                    <div class="text-sm text-primary-600 dark:text-primary-300">
                      <h5 class="font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="getRecommendationsByScore().title"></h5>
                      <p class="mb-3" x-text="getRecommendationsByScore().description"></p>
                      <ul class="list-disc list-inside space-y-1">
                        <template x-for="recommendation in getTopRecommendations()" :key="recommendation">
                          <li x-text="recommendation"></li>
                        </template>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Content-Based Recommendations -->
            <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8 mb-12">
              <h3 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-6">📚 Recommended Reading</h3>
              <p class="text-primary-600 dark:text-primary-300 mb-6">Based on your assessment results, here are specific articles and resources from our knowledge base that can help you improve:</p>
              
              <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                <template x-for="(link, index) in getRecommendationsByScore().nextSteps || []" :key="index">
                  <a :href="link" class="group bg-primary-50 dark:bg-primary-700 hover:bg-accent-50 dark:hover:bg-accent-900/20 rounded-lg p-4 transition-all duration-200 block">
                    <div class="flex items-start">
                      <div class="flex-shrink-0 w-8 h-8 bg-accent-600 text-white rounded-lg flex items-center justify-center mr-3">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                      </div>
                      <div class="flex-1 min-w-0">
                        <h4 class="text-sm font-semibold text-primary-900 dark:text-primary-100 group-hover:text-accent-600 transition-colors" x-text="getLinkTitle(link)"></h4>
                        <p class="text-xs text-primary-500 dark:text-primary-400 mt-1" x-text="getLinkDescription(link)"></p>
                      </div>
                      <div class="flex-shrink-0 ml-2">
                        <svg class="w-4 h-4 text-primary-400 group-hover:text-accent-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                        </svg>
                      </div>
                    </div>
                  </a>
                </template>
              </div>
            </div>

            <!-- Action Items -->
            <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8 mb-12">
              <h3 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-6">Recommended Action Items</h3>
              <div class="grid gap-4 md:grid-cols-2">
                <template x-for="(item, index) in getActionItems()" :key="index">
                  <div class="bg-primary-50 dark:bg-primary-700 rounded-lg p-4">
                    <div class="flex items-start">
                      <div class="flex-shrink-0 w-6 h-6 bg-accent-600 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3 mt-1" x-text="index + 1"></div>
                      <div>
                        <h5 class="font-semibold text-primary-900 dark:text-primary-100 mb-1" x-text="item.title"></h5>
                        <p class="text-sm text-primary-600 dark:text-primary-300" x-text="item.description"></p>
                        <div class="mt-2">
                          <span class="text-xs font-medium px-2 py-1 rounded-full" :class="item.priority === 'high' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400' : item.priority === 'medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' : 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'" x-text="item.priority.toUpperCase()"></span>
                        </div>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
            </div>

            <!-- Actions -->
            <div class="flex flex-wrap gap-4 justify-center">
              <button 
                @click="downloadResults()"
                class="px-6 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-md transition-colors font-medium"
              >
                Download Detailed Results
              </button>
              <a 
                href="/tech-leadership/assessments/"
                class="px-6 py-3 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors font-medium"
              >
                Back to Assessments
              </a>
              <button 
                @click="restartAssessment()"
                class="px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-colors font-medium"
              >
                Retake Assessment
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div 
          id="direct-matrix"
          x-data="directMatrixAssessment()"
          x-init="loadAssessment()"
        >
          <!-- Loading State -->
          <div x-show="isLoading" class="flex items-center justify-center p-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
            <span class="ml-3 text-primary-600 dark:text-primary-400">Loading assessment...</span>
          </div>

          <!-- Assessment Content -->
          <div x-show="!isLoading && currentAssessment && !showResults">
            <div class="max-w-6xl mx-auto">
              <!-- Progress Header -->
              <div class="mb-8">
                <div class="mb-4">
                  <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100" x-text="currentAssessment?.title"></h2>
                  <p class="text-primary-600 dark:text-primary-400 mt-2" x-text="currentAssessment?.description"></p>
                </div>
                
                <!-- Progress Bar -->
                <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
                  <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" :style="`width: ${getProgress()}%`"></div>
                </div>
                <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
                  <span x-text="`${Object.keys(responses).length} of ${getDimensionCount()} dimensions completed`"></span>
                  <span x-text="`${getProgress()}% complete`"></span>
                </div>
              </div>

              <!-- Instructions -->
              <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6 mb-8" x-show="currentAssessment?.maturityLevels">
                <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-2">How to Use This Assessment</h3>
                <p class="text-primary-600 dark:text-primary-300 mb-3">
                  For each dimension below, click on the maturity level that best describes your organization's current state. 
                  Read the descriptions carefully to make the most accurate assessment.
                </p>
                <div class="flex flex-wrap gap-4 text-sm">
                  <template x-for="level in currentAssessment?.maturityLevels || []" :key="level.id">
                    <div class="flex items-center">
                      <div class="w-4 h-4 rounded-full mr-2" :style="`background-color: ${level.color}`"></div>
                      <span class="font-medium" x-text="level.name"></span>
                    </div>
                  </template>
                </div>
              </div>

              <!-- Matrix Assessment Grid -->
              <div class="space-y-8">
                <template x-for="dimension in currentAssessment?.dimensions || []" :key="dimension.id">
                  <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
                    <div class="mb-6">
                      <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="dimension.title"></h3>
                      <p class="text-primary-600 dark:text-primary-300" x-text="dimension.description"></p>
                    </div>
                    
                    <div class="grid gap-3 md:grid-cols-5">
                      <template x-for="(level, index) in currentAssessment?.maturityLevels || []" :key="level.id">
                        <div class="relative">
                          <button
                            @click="updateResponse(dimension.id, level.id)"
                            class="w-full p-4 border-2 rounded-lg transition-all duration-200 text-left min-h-[120px]"
                            :class="responses[dimension.id] === level.id 
                              ? 'border-accent-600 bg-accent-50 dark:bg-accent-900/20 shadow-lg' 
                              : 'border-primary-200 dark:border-primary-600 hover:border-accent-300 hover:bg-primary-50 dark:hover:bg-primary-700'"
                          >
                            <div class="flex items-center mb-2">
                              <div 
                                class="w-4 h-4 rounded-full mr-2" 
                                :style="`background-color: ${level.color}`"
                              ></div>
                              <span class="font-semibold text-sm text-primary-900 dark:text-primary-100" x-text="level.name"></span>
                            </div>
                            <p class="text-xs text-primary-600 dark:text-primary-300 leading-tight" 
                               x-text="currentAssessment?.dimensionDetails?.[dimension.id]?.[level.id] || level.description">
                            </p>
                          </button>
                          
                          <div class="absolute top-2 right-2" x-show="responses[dimension.id] === level.id">
                            <svg class="w-5 h-5 text-accent-600" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                          </div>
                        </div>
                      </template>
                    </div>
                  </div>
                </template>
              </div>

              <!-- Navigation -->
              <div class="flex justify-center mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
                <button 
                  @click="completeAssessment()" 
                  :disabled="!isComplete()"
                  class="flex items-center px-8 py-3 bg-green-600 hover:bg-green-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors text-lg font-medium"
                >
                  Complete Assessment
                </button>
              </div>
            </div>
          </div>

          <!-- Results Display -->
          <div x-show="showResults && assessmentResult" class="max-w-6xl mx-auto">
            <!-- Results Header -->
            <div class="text-center mb-8">
              <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Results</h1>
              <div class="max-w-2xl mx-auto">
                <h2 class="text-xl text-primary-600 dark:text-primary-400 mb-2" x-text="assessmentResult?.assessmentTitle"></h2>
                <p class="text-sm text-primary-500 dark:text-primary-400" x-text="`Completed on ${new Date(assessmentResult?.completedAt).toLocaleDateString()}`"></p>
              </div>
            </div>

            <!-- Overall Summary -->
            <div class="grid gap-8 lg:grid-cols-3 mb-12">
              <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
                <div class="text-center">
                  <div class="text-5xl font-bold text-accent-600 mb-3" x-text="getAverageLevel()"></div>
                  <div class="text-xl text-primary-900 dark:text-primary-100 mb-2">Average Maturity Level</div>
                  <div class="text-sm text-primary-600 dark:text-primary-300">Out of 5.0</div>
                </div>
              </div>
              
              <!-- Matrix Visualization -->
              <div class="lg:col-span-2 bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
                <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-4 text-center">
                  Maturity Matrix Overview
                </h3>
                <div class="space-y-3">
                  <template x-for="dimension in currentAssessment?.dimensions || []" :key="dimension.id">
                    <div class="flex items-center justify-between p-3 bg-primary-50 dark:bg-primary-700 rounded-lg">
                      <span class="font-medium text-primary-900 dark:text-primary-100" x-text="dimension.title"></span>
                      <div class="flex items-center">
                        <div class="w-4 h-4 rounded-full mr-2" :style="`background-color: ${getLevelColor(dimension.id)}`"></div>
                        <span class="text-sm font-medium text-primary-600 dark:text-primary-300" x-text="getLevelName(dimension.id)"></span>
                      </div>
                    </div>
                  </template>
                </div>
              </div>
            </div>

            <!-- Actions -->
            <div class="flex flex-wrap gap-4 justify-center">
              <button 
                @click="downloadResults()"
                class="px-6 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-md transition-colors"
              >
                Download Results
              </button>
              <a 
                href="/tech-leadership/assessments/"
                class="px-6 py-2 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors"
              >
                Back to Assessments
              </a>
            </div>
          </div>
        </div>
      )}
    </div>
  </main>

  <script is:inline>
    function directQuestionnaireAssessment() {
      return {
        isLoading: true,
        currentAssessment: null,
        currentSectionIndex: 0,
        responses: {},
        showResults: false,
        assessmentResult: null,
        startTime: null,

        async loadAssessment() {
          try {
            this.isLoading = true;
            const assessmentId = window.location.pathname.split('/').filter(p => p).pop();
            const response = await fetch(`/tech-leadership/assessments/${assessmentId}.json/`);
            
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            this.currentAssessment = await response.json();
            this.currentSectionIndex = 0;
            this.responses = {};
            this.startTime = new Date();
            this.showResults = false;
            
          } catch (error) {
            console.error('Failed to load assessment:', error);
            alert(`Failed to load assessment: ${error.message}`);
          } finally {
            this.isLoading = false;
          }
        },

        getCurrentSection() {
          return this.currentAssessment?.sections?.[this.currentSectionIndex] || null;
        },

        getProgress() {
          if (!this.currentAssessment?.sections) return 0;
          return Math.round(((this.currentSectionIndex + 1) / this.currentAssessment.sections.length) * 100);
        },

        updateResponse(questionId, value) {
          this.responses[questionId] = value;
        },

        isSectionComplete() {
          const currentSection = this.getCurrentSection();
          if (!currentSection) return false;
          
          const requiredQuestions = currentSection.questions.filter(q => q.required);
          return requiredQuestions.every(q => this.responses[q.id] !== undefined && this.responses[q.id] !== '');
        },

        nextSection() {
          if (this.isSectionComplete() && this.currentSectionIndex < (this.currentAssessment?.sections?.length || 0) - 1) {
            this.currentSectionIndex++;
          }
        },

        previousSection() {
          if (this.currentSectionIndex > 0) {
            this.currentSectionIndex--;
          }
        },

        completeAssessment() {
          if (!this.isSectionComplete()) return;
          
          this.showResults = true;
          this.assessmentResult = {
            id: 'result-' + Date.now(),
            assessmentId: this.currentAssessment.id,
            assessmentTitle: this.currentAssessment.title,
            type: 'questionnaire',
            responses: this.responses,
            completedAt: new Date(),
            timeSpent: this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0
          };
        },

        getOverallScore() {
          if (!this.currentAssessment?.sections) return 0;
          
          let totalScore = 0;
          let totalQuestions = 0;
          
          this.currentAssessment.sections.forEach(section => {
            section.questions.forEach(question => {
              if (this.responses[question.id]) {
                totalScore += parseInt(this.responses[question.id]);
                totalQuestions++;
              }
            });
          });
          
          return totalQuestions > 0 ? (totalScore / totalQuestions).toFixed(1) : 0;
        },

        getCompletionPercentage() {
          if (!this.currentAssessment?.sections) return 0;
          
          let totalQuestions = 0;
          let answeredQuestions = 0;
          
          this.currentAssessment.sections.forEach(section => {
            section.questions.forEach(question => {
              totalQuestions++;
              if (this.responses[question.id]) {
                answeredQuestions++;
              }
            });
          });
          
          return Math.round((answeredQuestions / totalQuestions) * 100);
        },

        getSectionScores() {
          if (!this.currentAssessment?.sections) return [];
          
          return this.currentAssessment.sections.map(section => {
            let sectionScore = 0;
            let questionCount = 0;
            
            section.questions.forEach(question => {
              if (this.responses[question.id]) {
                sectionScore += parseInt(this.responses[question.id]);
                questionCount++;
              }
            });
            
            return {
              id: section.id,
              title: section.title,
              description: section.description,
              score: questionCount > 0 ? sectionScore / questionCount : 0
            };
          });
        },

        getHighestScoringSection() {
          const sections = this.getSectionScores();
          return sections.reduce((highest, section) => 
            section.score > (highest?.score || 0) ? section : highest, null);
        },

        getMaturityLevelText() {
          const score = parseFloat(this.getOverallScore());
          if (score >= 4.5) return 'Advanced (Self-Service)';
          if (score >= 3.5) return 'Mature (Automation)';
          if (score >= 2.5) return 'Developing (Expansion)';
          if (score >= 1.5) return 'Basic (Standardization)';
          return 'Initial (Normalization)';
        },

        getMaturityDescription() {
          const score = parseFloat(this.getOverallScore());
          if (score >= 4.5) return 'Your organization has reached advanced maturity with self-service capabilities and autonomous systems.';
          if (score >= 3.5) return 'Your organization has mature practices with extensive automation and efficient workflows.';
          if (score >= 2.5) return 'Your organization is developing with expanding practices and growing consistency.';
          if (score >= 1.5) return 'Your organization has basic standardization with some consistent practices in place.';
          return 'Your organization is in the initial stage, focusing on normalizing basic practices.';
        },

        getRecommendationsByScore() {
          const totalScore = this.getTotalScore();
          const recommendations = this.currentAssessment?.recommendations || [];
          
          for (const rec of recommendations) {
            if (totalScore >= rec.scoreRange[0] && totalScore <= rec.scoreRange[1]) {
              return rec;
            }
          }
          
          return {
            title: 'Keep Improving',
            description: 'Continue building on your current practices.',
            items: ['Review and refine existing processes'],
            nextSteps: [],
            priority: 'medium'
          };
        },

        getTotalScore() {
          if (!this.currentAssessment?.sections) return 0;
          
          let totalScore = 0;
          let totalQuestions = 0;
          
          this.currentAssessment.sections.forEach(section => {
            section.questions.forEach(question => {
              if (this.responses[question.id]) {
                totalScore += parseInt(this.responses[question.id]);
                totalQuestions++;
              }
            });
          });
          
          return totalScore;
        },

        getTopRecommendations() {
          const recommendation = this.getRecommendationsByScore();
          return recommendation.items || [];
        },

        getActionItems() {
          const sections = this.getSectionScores();
          const actionItems = [];
          
          sections.forEach(section => {
            if (section.score < 3) {
              if (section.id === 'normalization') {
                actionItems.push({
                  title: 'Establish Version Control Standards',
                  description: 'Implement consistent branching strategies and code review processes',
                  priority: 'high'
                });
              } else if (section.id === 'standardization') {
                actionItems.push({
                  title: 'Create Golden Path Documentation',
                  description: 'Document and standardize common workflows and patterns',
                  priority: 'high'
                });
              } else if (section.id === 'expansion') {
                actionItems.push({
                  title: 'Scale Practices Across Teams',
                  description: 'Ensure consistent implementation across all development teams',
                  priority: 'medium'
                });
              } else if (section.id === 'automation') {
                actionItems.push({
                  title: 'Implement CI/CD Pipelines',
                  description: 'Automate testing, building, and deployment processes',
                  priority: 'high'
                });
              } else if (section.id === 'self-service') {
                actionItems.push({
                  title: 'Enable Self-Service Capabilities',
                  description: 'Provide tools and platforms for autonomous operations',
                  priority: 'low'
                });
              }
            }
          });
          
          return actionItems.slice(0, 6); // Limit to 6 items
        },

        getLinkTitle(link) {
          // Extract meaningful title from URL path
          const pathParts = link.split('/').filter(part => part && part !== 'tech-leadership');
          if (pathParts.length >= 2) {
            const lastPart = pathParts[pathParts.length - 1] || pathParts[pathParts.length - 2];
            return lastPart.split('-').map(word => 
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }
          return 'Knowledge Base Article';
        },

        getLinkDescription(link) {
          // Generate description based on URL structure
          if (link.includes('/wiki/')) {
            return 'Wiki article with detailed guidance';
          } else if (link.includes('/blog/')) {
            return 'Blog post with practical insights';
          } else if (link.includes('/tools/')) {
            return 'Interactive tool or calculator';
          }
          return 'Knowledge base resource';
        },

        restartAssessment() {
          this.showResults = false;
          this.assessmentResult = null;
          this.currentSectionIndex = 0;
          this.responses = {};
          this.startTime = new Date();
        },

        downloadResults() {
          if (!this.assessmentResult) return;
          
          const detailedResults = {
            ...this.assessmentResult,
            overallScore: this.getOverallScore(),
            completionPercentage: this.getCompletionPercentage(),
            maturityLevel: this.getMaturityLevelText(),
            maturityDescription: this.getMaturityDescription(),
            sectionBreakdown: this.getSectionScores(),
            recommendations: this.getTopRecommendations(),
            actionItems: this.getActionItems(),
            generatedAt: new Date().toISOString()
          };
          
          const content = JSON.stringify(detailedResults, null, 2);
          const blob = new Blob([content], { type: 'application/json' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `engineering-practices-assessment-${new Date().toISOString().split('T')[0]}.json`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }
      };
    }

    // Make function globally available
    window.directQuestionnaireAssessment = directQuestionnaireAssessment;

    function directMatrixAssessment() {
      return {
        isLoading: true,
        currentAssessment: null,
        responses: {},
        showResults: false,
        assessmentResult: null,
        startTime: null,

        async loadAssessment() {
          try {
            this.isLoading = true;
            const assessmentId = window.location.pathname.split('/').filter(p => p).pop();
            const response = await fetch(`/tech-leadership/assessments/${assessmentId}.json/`);
            
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            this.currentAssessment = await response.json();
            this.responses = {};
            this.startTime = new Date();
            this.showResults = false;
            
          } catch (error) {
            console.error('Failed to load assessment:', error);
            alert(`Failed to load assessment: ${error.message}`);
          } finally {
            this.isLoading = false;
          }
        },

        updateResponse(dimensionId, levelId) {
          this.responses[dimensionId] = levelId;
        },

        getProgress() {
          if (!this.currentAssessment?.dimensions) return 0;
          return Math.round((Object.keys(this.responses).length / this.currentAssessment.dimensions.length) * 100);
        },

        getDimensionCount() {
          return this.currentAssessment?.dimensions?.length || 0;
        },

        isComplete() {
          if (!this.currentAssessment?.dimensions) return false;
          return Object.keys(this.responses).length >= this.currentAssessment.dimensions.length;
        },

        completeAssessment() {
          if (!this.isComplete()) return;
          
          this.showResults = true;
          this.assessmentResult = {
            id: 'result-' + Date.now(),
            assessmentId: this.currentAssessment.id,
            assessmentTitle: this.currentAssessment.title,
            type: 'matrix',
            responses: this.responses,
            completedAt: new Date(),
            timeSpent: this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0
          };
        },

        getAverageLevel() {
          if (!this.currentAssessment?.dimensions) return 0;
          
          let total = 0;
          let count = 0;
          
          this.currentAssessment.dimensions.forEach(dimension => {
            const levelId = this.responses[dimension.id];
            if (levelId) {
              const level = this.currentAssessment.maturityLevels.find(l => l.id === levelId);
              if (level) {
                total += level.level;
                count++;
              }
            }
          });
          
          return count > 0 ? (total / count).toFixed(1) : 0;
        },

        getLevelColor(dimensionId) {
          const levelId = this.responses[dimensionId];
          if (!levelId) return '#6b7280';
          
          const level = this.currentAssessment?.maturityLevels?.find(l => l.id === levelId);
          return level?.color || '#6b7280';
        },

        getLevelName(dimensionId) {
          const levelId = this.responses[dimensionId];
          if (!levelId) return 'Not selected';
          
          const level = this.currentAssessment?.maturityLevels?.find(l => l.id === levelId);
          return level?.name || 'Unknown';
        },

        getLevelNumber(dimensionId) {
          const levelId = this.responses[dimensionId];
          if (!levelId) return 0;
          
          const level = this.currentAssessment?.maturityLevels?.find(l => l.id === levelId);
          return level?.level || 0;
        },

        downloadResults() {
          if (!this.assessmentResult) return;
          
          const results = {
            ...this.assessmentResult,
            dimensions: this.currentAssessment?.dimensions?.map(dimension => ({
              id: dimension.id,
              title: dimension.title,
              selectedLevel: this.responses[dimension.id],
              levelName: this.getLevelName(dimension.id),
              levelNumber: this.getLevelNumber(dimension.id),
              color: this.getLevelColor(dimension.id)
            })) || [],
            averageLevel: this.getAverageLevel()
          };
          
          const content = JSON.stringify(results, null, 2);
          const blob = new Blob([content], { type: 'application/json' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `matrix-assessment-${this.assessmentResult.assessmentId}-${new Date().toISOString().split('T')[0]}.json`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }
      };
    }

    // Make function globally available
    window.directMatrixAssessment = directMatrixAssessment;
  </script>
</Layout>