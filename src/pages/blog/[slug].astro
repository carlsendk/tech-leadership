---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";

interface Props {
  entry: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const blogEntries = await getCollection(
    "blog",
    ({ data }: CollectionEntry<"blog">) => {
      return !data.draft;
    },
  );

  return blogEntries.map((entry: CollectionEntry<"blog">) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props as Props;
const { Content } = await entry.render();

// Get all blog posts for navigation
const allPosts = await getCollection("blog", ({ data }) => !data.draft);
const sortedPosts = allPosts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Find current post index and get prev/next
const currentIndex = sortedPosts.findIndex(post => post.slug === entry.slug);
const prevPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : null;
---

<BlogLayout
  title={entry.data.title}
  description={entry.data.description}
  date={entry.data.date}
  tags={entry.data.tags}
  category={entry.data.category}
  author={entry.data.author}
  heroImage={entry.data.heroImage || entry.data.image}
  heroImageAlt={entry.data.heroImageAlt}
>
  <div class="prose prose-primary dark:prose-invert max-w-none" data-title={entry.data.title}>
    <Content />
  </div>
  
  <!-- Next/Previous Navigation -->
  {(prevPost || nextPost) && (
    <nav class="mt-12 pt-8 border-t border-primary-200 dark:border-primary-700" aria-label="Article navigation">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {prevPost && (
          <div class="group">
            <p class="text-sm font-medium text-primary-500 dark:text-primary-400 mb-2">
              ← Previous Article
            </p>
            <a 
              href={`/tech-leadership/blog/${prevPost.slug}`}
              class="block p-4 bg-primary-50 dark:bg-primary-800/50 rounded-lg hover:bg-primary-100 dark:hover:bg-primary-800 transition-colors"
            >
              <h3 class="font-semibold text-primary-900 dark:text-primary-100 group-hover:text-accent-600 dark:group-hover:text-accent-400 transition-colors line-clamp-2">
                {prevPost.data.title}
              </h3>
              <p class="text-sm text-primary-600 dark:text-primary-300 mt-1 line-clamp-2">
                {prevPost.data.description}
              </p>
            </a>
          </div>
        )}
        
        {nextPost && (
          <div class={`group ${!prevPost ? 'md:col-start-2' : ''}`}>
            <p class="text-sm font-medium text-primary-500 dark:text-primary-400 mb-2 text-right">
              Next Article →
            </p>
            <a 
              href={`/tech-leadership/blog/${nextPost.slug}`}
              class="block p-4 bg-primary-50 dark:bg-primary-800/50 rounded-lg hover:bg-primary-100 dark:hover:bg-primary-800 transition-colors"
            >
              <h3 class="font-semibold text-primary-900 dark:text-primary-100 group-hover:text-accent-600 dark:group-hover:text-accent-400 transition-colors line-clamp-2">
                {nextPost.data.title}
              </h3>
              <p class="text-sm text-primary-600 dark:text-primary-300 mt-1 line-clamp-2">
                {nextPost.data.description}
              </p>
            </a>
          </div>
        )}
      </div>
    </nav>
  )}
  
  <script is:inline>
    // Auto-skip first H1 heading - remove all first H1s since title is in header
    function autoSkipFirstH1() {
      const contentDiv = document.querySelector('.prose[data-title]');
      if (!contentDiv) return;
      
      const firstH1 = contentDiv.querySelector('h1');
      
      // Always remove the first H1 since we display title in article header
      if (firstH1) {
        firstH1.remove();
        return true;
      }
      return false;
    }
    
    // Run on page load with multiple attempts and intervals
    function runAutoSkip() {
      let attempts = 0;
      const maxAttempts = 10;
      
      function tryRemove() {
        if (autoSkipFirstH1() || attempts >= maxAttempts) {
          return;
        }
        attempts++;
        setTimeout(tryRemove, 50);
      }
      
      tryRemove();
    }
    
    // Multiple event listeners to ensure it runs
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', runAutoSkip);
    } else {
      runAutoSkip();
    }
    
    // Additional fallback
    setTimeout(runAutoSkip, 500);

    // Reading progress indicator
    function updateReadingProgress() {
      const article = document.querySelector('.prose');
      const progressBar = document.getElementById('reading-progress');
      const progressText = document.getElementById('reading-percentage');
      const progressBanner = document.getElementById('reading-progress-banner');
      
      if (!article || !progressBar || !progressText || !progressBanner) return;
      
      // Account for header height (main header 64px + breadcrumb ~48px = ~112px)
      const headerHeight = 112;
      const articleTop = article.offsetTop;
      const articleHeight = article.offsetHeight;
      const windowHeight = window.innerHeight;
      const scrollY = window.scrollY;
      
      // Show progress bar only when scrolling starts (after 100px)
      if (scrollY > 100) {
        progressBanner.classList.remove('opacity-0', '-translate-y-full');
        progressBanner.classList.add('opacity-100', 'translate-y-0');
      } else {
        progressBanner.classList.remove('opacity-100', 'translate-y-0');
        progressBanner.classList.add('opacity-0', '-translate-y-full');
      }
      
      // Start progress when article comes into view, accounting for header
      const start = articleTop - headerHeight;
      const end = articleTop + articleHeight - windowHeight + headerHeight;
      const progress = Math.max(0, Math.min(1, (scrollY - start) / (end - start)));
      
      const percentage = Math.round(progress * 100);
      
      progressBar.style.width = `${percentage}%`;
      progressText.textContent = `${percentage}%`;
    }
    
    window.addEventListener('scroll', updateReadingProgress);
    window.addEventListener('resize', updateReadingProgress);
    updateReadingProgress();

    // Table of Contents Generator
    function generateTableOfContents() {
      const tocNav = document.getElementById('toc-nav');
      const tocContainer = document.getElementById('table-of-contents');
      const article = document.querySelector('.prose');
      
      if (!tocNav || !article) return;
      
      // Find only H2 headings for a cleaner, shorter TOC
      const headings = article.querySelectorAll('h2');
      
      // Hide TOC if no headings
      if (headings.length === 0) {
        if (tocContainer) tocContainer.style.display = 'none';
        return;
      }
      
      // Generate TOC items
      tocNav.innerHTML = '';
      headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.substring(1));
        const text = heading.textContent;
        const id = heading.id || `heading-${index}`;
        
        // Ensure heading has an ID
        if (!heading.id) {
          heading.id = id;
        }
        
        // Create TOC item (all H2s get same styling)
        const tocItem = document.createElement('a');
        tocItem.href = `#${id}`;
        tocItem.textContent = text;
        tocItem.className = 'block py-2 px-3 text-sm font-medium text-primary-700 dark:text-primary-300 transition-colors rounded hover:bg-primary-50 dark:hover:bg-primary-800';
        tocItem.dataset.heading = id;
        
        // Smooth scroll on click with header offset
        tocItem.addEventListener('click', (e) => {
          e.preventDefault();
          const headerHeight = 112; // Account for main header + breadcrumb
          const elementPosition = heading.offsetTop - headerHeight;
          window.scrollTo({
            top: elementPosition,
            behavior: 'smooth'
          });
        });
        
        tocNav.appendChild(tocItem);
      });
      
      // Highlight current section on scroll
      updateTOCHighlight();
    }
    
    function updateTOCHighlight() {
      const headings = document.querySelectorAll('.prose h2');
      const tocLinks = document.querySelectorAll('#toc-nav a');
      
      if (headings.length === 0) return;
      
      let currentHeading = null;
      const headerHeight = 112; // Account for main header + breadcrumb
      const scrollTop = window.scrollY + headerHeight;
      
      // Find current heading
      headings.forEach(heading => {
        if (heading.offsetTop <= scrollTop) {
          currentHeading = heading;
        }
      });
      
      // Update TOC highlighting
      tocLinks.forEach(link => {
        link.classList.remove('bg-accent-50', 'dark:bg-accent-900/20', 'text-accent-700', 'dark:text-accent-300');
        
        if (currentHeading && link.dataset.heading === currentHeading.id) {
          link.classList.add('bg-accent-50', 'dark:bg-accent-900/20', 'text-accent-700', 'dark:text-accent-300');
        }
      });
    }
    
    // Initialize TOC after content is fully loaded
    function initializeTOC() {
      generateTableOfContents();
    }
    
    // Multiple initialization attempts
    if (document.readyState === 'complete') {
      initializeTOC();
    } else {
      window.addEventListener('load', initializeTOC);
    }
    
    // Also try after a delay as fallback
    setTimeout(initializeTOC, 1000);
    
    // Update highlighting on scroll
    window.addEventListener('scroll', updateTOCHighlight);
  </script>
</BlogLayout>
