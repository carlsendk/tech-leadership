---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";

interface Props {
  entry: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const blogEntries = await getCollection(
    "blog",
    ({ data }: CollectionEntry<"blog">) => {
      return !data.draft;
    },
  );

  return blogEntries.map((entry: CollectionEntry<"blog">) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props as Props;
const { Content } = await entry.render();
---

<BlogLayout
  title={entry.data.title}
  description={entry.data.description}
  date={entry.data.date}
  tags={entry.data.tags}
  category={entry.data.category}
  author={entry.data.author}
>
  <div class="prose prose-primary dark:prose-invert max-w-none">
    <Content />
  </div>
</BlogLayout>

<script>
  import mermaid from "mermaid";

  // Wait for the page to be fully loaded
  document.addEventListener("astro:page-load", async () => {
    try {
      // Initialize mermaid with dark mode detection
      const isDarkMode = document.documentElement.classList.contains("dark");
      await mermaid.initialize({
        startOnLoad: false,
        theme: isDarkMode ? "dark" : "default",
        securityLevel: "loose",
        themeVariables: {
          fontFamily: "system-ui, -apple-system, sans-serif",
          fontSize: "16px",
        },
      });

      // Function to render mermaid diagrams
      async function renderMermaid() {
        const diagrams = document.querySelectorAll(
          "pre > code.language-mermaid",
        );
        console.log("Found diagrams:", diagrams.length); // Debug log

        for (const diagram of diagrams) {
          try {
            const container = diagram.parentElement;
            if (container && !container.hasAttribute("data-processed")) {
              const content = diagram.textContent?.trim() || "";
              console.log("Diagram content:", content); // Debug log

              // Create a new div for the diagram
              const mermaidDiv = document.createElement("div");
              mermaidDiv.className = "mermaid";
              mermaidDiv.textContent = content;

              // Create a unique ID for the diagram
              const id = `mermaid-${crypto.randomUUID()}`;
              mermaidDiv.id = id;

              try {
                // Try to render the diagram
                const { svg } = await mermaid.render(id, content);
                mermaidDiv.innerHTML = svg;
                container.replaceWith(mermaidDiv);
                console.log("Diagram rendered successfully"); // Debug log
              } catch (renderError) {
                console.error("Failed to render diagram:", renderError);
                // Keep the original code block if rendering fails
                container.classList.add("render-failed");
              }
            }
          } catch (error) {
            console.error("Error processing diagram:", error);
          }
        }
      }

      // Initial render
      await renderMermaid();

      // Re-render on theme changes
      document.addEventListener("astro:after-swap", async () => {
        const isDarkMode = document.documentElement.classList.contains("dark");
        await mermaid.initialize({
          theme: isDarkMode ? "dark" : "default",
        });
        await renderMermaid();
      });
    } catch (error) {
      console.error("Failed to initialize Mermaid:", error);
    }
  });
</script>

<style>
  :global(.mermaid) {
    @apply my-8 text-center bg-white dark:bg-primary-900 rounded-lg p-4;
  }

  :global(pre.render-failed) {
    @apply border-l-4 border-red-500;
  }
</style>
