---
import Layout from "../../layouts/Layout.astro";
import ContentCard from "../../components/ContentCard.astro";
import FilterBox from "../../components/FilterBox.astro";
import { getCollection } from "astro:content";
import {
  getBlogUrl,
  getWikiUrl,
  getBlogIndexUrl,
  getWikiIndexUrl,
} from "../../utils/url";

export async function getStaticPaths() {
  const allBlogPosts = await getCollection("blog", ({ data }) => !data.draft);
  const allWikiEntries = await getCollection("wiki", ({ data }) => !data.draft);

  // Extract all unique tags from both collections
  const allTags = new Set();

  allBlogPosts.forEach((post) => {
    post.data.tags.forEach((tag) => allTags.add(tag));
  });

  allWikiEntries.forEach((entry) => {
    entry.data.tags.forEach((tag) => allTags.add(tag));
  });

  return Array.from(allTags).map((tag) => ({
    params: { tag },
    props: { tag },
  }));
}

const { tag } = Astro.props as { tag: string };

// Get all content with the specified tag
const blogPosts = await getCollection("blog", ({ data }) => {
  return !data.draft && data.tags.includes(tag);
});

const wikiEntries = await getCollection("wiki", ({ data }) => {
  return !data.draft && data.tags.includes(tag);
});

// Sort blog posts by date (newest first)
const sortedBlogPosts = blogPosts.sort((a, b) => {
  return b.data.date.getTime() - a.data.date.getTime();
});

// Sort wiki entries by title
const sortedWikiEntries = wikiEntries.sort((a, b) => {
  return a.data.title.localeCompare(b.data.title);
});

// Get all tags for filtering
const allBlogPosts = await getCollection("blog", ({ data }) => !data.draft);
const allWikiEntries = await getCollection("wiki", ({ data }) => !data.draft);

const allTags = [
  ...new Set([
    ...allBlogPosts.flatMap((post) => post.data.tags),
    ...allWikiEntries.flatMap((entry) => entry.data.tags),
  ]),
].sort();

// Calculate statistics
const totalItems = sortedBlogPosts.length + sortedWikiEntries.length;
const blogCount = sortedBlogPosts.length;
const wikiCount = sortedWikiEntries.length;
---

<Layout
  title={`Tagged with #${tag} | Knowledge Base`}
  description={`All content tagged with #${tag}`}
>
  <div class="max-w-7xl mx-auto px-4 py-10 sm:px-6 lg:px-8">
    <!-- Hero section -->
    <div
      class="bg-gradient-to-br from-primary-900 to-primary-950 rounded-2xl p-8 mb-12 text-white"
    >
      <h1 class="text-4xl font-bold mb-4">
        <span class="text-accent-400">#</span>{tag}
      </h1>
      <p class="text-xl text-primary-200 mb-6">
        Browse all content tagged with #{tag}
      </p>

      <!-- Statistics -->
      <div class="grid grid-cols-3 gap-4 max-w-lg">
        <div class="text-center">
          <div class="text-3xl font-bold text-accent-400">{totalItems}</div>
          <div class="text-primary-300 text-sm">Total Items</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-accent-400">{blogCount}</div>
          <div class="text-primary-300 text-sm">Blog Posts</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-accent-400">{wikiCount}</div>
          <div class="text-primary-300 text-sm">Wiki Articles</div>
        </div>
      </div>
    </div>

    <!-- Filter box -->
    <div class="mb-8">
      <FilterBox
        title="Browse by Tag"
        tags={allTags}
        activeTag={tag}
        baseUrl="/tags"
      />
    </div>

    {
      sortedBlogPosts.length > 0 && (
        <div class="mb-12">
          <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-6">
            Blog Posts
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {sortedBlogPosts.map((post) => (
              <ContentCard
                title={post.data.title}
                description={post.data.description}
                url={getBlogUrl(post.slug)}
                tags={post.data.tags}
                category={post.data.category}
                date={post.data.date}
                author={post.data.author}
              />
            ))}
          </div>
        </div>
      )
    }

    {
      sortedWikiEntries.length > 0 && (
        <div class="mb-12">
          <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-6">
            Wiki Articles
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {sortedWikiEntries.map((entry) => (
              <ContentCard
                title={entry.data.title}
                description={entry.data.description}
                url={getWikiUrl(entry.slug)}
                tags={entry.data.tags}
                category={entry.data.category}
                isWiki={true}
              />
            ))}
          </div>
        </div>
      )
    }

    {
      totalItems === 0 && (
        <div class="text-center py-12">
          <h3 class="text-lg font-medium text-primary-900 dark:text-primary-100">
            No content found with tag #{tag}
          </h3>
          <p class="mt-2 text-primary-600 dark:text-primary-300">
            Try browsing all content instead.
          </p>
          <div class="mt-4 flex justify-center gap-4">
            <a
              href={getBlogIndexUrl()}
              class="text-accent-600 dark:text-accent-400 hover:underline"
            >
              View all blog posts
            </a>
            <a
              href={getWikiIndexUrl()}
              class="text-accent-600 dark:text-accent-400 hover:underline"
            >
              View all wiki articles
            </a>
          </div>
        </div>
      )
    }
  </div>
</Layout>
