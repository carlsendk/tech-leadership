---
// Simple Matrix Assessment Component
export interface Props {
  assessmentId?: string;
}

const { assessmentId } = Astro.props;
---

<div 
  id="matrix-assessment"
  x-data="matrixAssessment()"
  x-init="initializeMatrix()"
>
  <!-- Assessment Loading State -->
  <div x-show="isLoading" class="flex items-center justify-center p-8">
    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
    <span class="ml-3 text-primary-600 dark:text-primary-400">Loading assessment...</span>
  </div>

  <!-- Assessment Selection -->
  <div x-show="!isLoading && !currentAssessment && !showResults" class="space-y-8">
    <div class="grid gap-8 md:grid-cols-2">
      <template x-for="assessment in availableAssessments" :key="assessment.id">
        <div class="group bg-white dark:bg-primary-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-primary-100 dark:border-primary-700 overflow-hidden">
          <div class="p-6 pb-4">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                <div class="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center">
                  <span class="text-green-600 dark:text-green-400 text-sm font-bold">üéØ</span>
                </div>
                <div class="text-xs font-medium text-primary-500 dark:text-primary-400 uppercase tracking-wide">
                  Matrix Assessment
                </div>
              </div>
              <span x-text="assessment.category" class="text-xs font-medium bg-primary-100 dark:bg-primary-700 text-primary-600 dark:text-primary-300 px-3 py-1 rounded-full"></span>
            </div>
            
            <h3 class="text-xl font-bold text-primary-900 dark:text-primary-100 mb-3 group-hover:text-accent-600 transition-colors" x-text="assessment.title"></h3>
            <p class="text-primary-600 dark:text-primary-300 text-sm leading-relaxed mb-4" x-text="assessment.description"></p>
            
            <div class="flex items-center text-sm text-primary-500 dark:text-primary-400 mb-6">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span x-text="`${assessment.estimatedTime} minutes`"></span>
            </div>
          </div>
          
          <div class="px-6 pb-6">
            <a 
              :href="`/tech-leadership/assessments/${assessment.id}/`"
              class="flex-1 w-full bg-accent-600 hover:bg-accent-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 text-center block"
            >
              Start Assessment
            </a>
          </div>
        </div>
      </template>
    </div>
  </div>

  <!-- Matrix Assessment Content -->
  <div x-show="currentAssessment && !showResults">
    <div class="max-w-6xl mx-auto">
      <!-- Progress Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100" x-text="currentAssessment?.title"></h2>
          <button @click="goBack()" class="text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors">
            ‚Üê Back
          </button>
        </div>
        
        <!-- Progress Bar -->
        <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
          <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" :style="`width: ${getProgress()}%`"></div>
        </div>
        <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
          <span x-text="`${Object.keys(responses).length} of ${getDimensionCount()} dimensions completed`"></span>
          <span x-text="`${getProgress()}% complete`"></span>
        </div>
      </div>

      <!-- Instructions -->
      <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6 mb-8" x-show="currentAssessment?.maturityLevels">
        <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-2">How to Use This Assessment</h3>
        <p class="text-primary-600 dark:text-primary-300 mb-3">
          For each dimension below, click on the maturity level that best describes your organization's current state. 
          Read the descriptions carefully to make the most accurate assessment.
        </p>
        <div class="flex flex-wrap gap-4 text-sm">
          <template x-for="level in currentAssessment?.maturityLevels || []" :key="level.id">
            <div class="flex items-center">
              <div class="w-4 h-4 rounded-full mr-2" :style="`background-color: ${level.color}`"></div>
              <span class="font-medium" x-text="level.name"></span>
            </div>
          </template>
        </div>
      </div>

      <!-- Matrix Assessment Grid -->
      <div class="space-y-8">
        <template x-for="dimension in currentAssessment?.dimensions || []" :key="dimension.id">
          <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
            <div class="mb-6">
              <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="dimension.title"></h3>
              <p class="text-primary-600 dark:text-primary-300" x-text="dimension.description"></p>
            </div>
            
            <div class="grid gap-3 md:grid-cols-5">
              <template x-for="(level, index) in currentAssessment?.maturityLevels || []" :key="level.id">
                <div class="relative">
                  <button
                    @click="updateResponse(dimension.id, level.id)"
                    class="w-full p-4 border-2 rounded-lg transition-all duration-200 text-left min-h-[120px]"
                    :class="responses[dimension.id] === level.id 
                      ? 'border-accent-600 bg-accent-50 dark:bg-accent-900/20 shadow-lg' 
                      : 'border-primary-200 dark:border-primary-600 hover:border-accent-300 hover:bg-primary-50 dark:hover:bg-primary-700'"
                  >
                    <div class="flex items-center mb-2">
                      <div 
                        class="w-4 h-4 rounded-full mr-2" 
                        :style="`background-color: ${level.color}`"
                      ></div>
                      <span class="font-semibold text-sm text-primary-900 dark:text-primary-100" x-text="level.name"></span>
                    </div>
                    <p class="text-xs text-primary-600 dark:text-primary-300 leading-tight" 
                       x-text="currentAssessment?.dimensionDetails?.[dimension.id]?.[level.id] || level.description">
                    </p>
                  </button>
                  
                  <div class="absolute top-2 right-2" x-show="responses[dimension.id] === level.id">
                    <svg class="w-5 h-5 text-accent-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </template>
      </div>

      <!-- Navigation -->
      <div class="flex justify-center mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
        <button 
          @click="completeAssessment()" 
          :disabled="!isComplete()"
          class="flex items-center px-8 py-3 bg-green-600 hover:bg-green-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors text-lg font-medium"
        >
          Complete Assessment
        </button>
      </div>
    </div>
  </div>

  <!-- Results Display -->
  <div x-show="showResults && assessmentResult" class="container mx-auto px-4">
    <div class="max-w-6xl mx-auto">
      <!-- Results Header -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Results</h1>
        <div class="max-w-2xl mx-auto">
          <h2 class="text-xl text-primary-600 dark:text-primary-400 mb-2" x-text="assessmentResult?.assessmentTitle"></h2>
          <p class="text-sm text-primary-500 dark:text-primary-400" x-text="`Completed on ${new Date(assessmentResult?.completedAt).toLocaleDateString()}`"></p>
        </div>
      </div>

      <!-- Overall Summary -->
      <div class="grid gap-8 lg:grid-cols-3 mb-12">
        <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
          <div class="text-center">
            <div class="text-5xl font-bold text-accent-600 mb-3" x-text="getAverageLevel()"></div>
            <div class="text-xl text-primary-900 dark:text-primary-100 mb-2">Average Maturity Level</div>
            <div class="text-sm text-primary-600 dark:text-primary-300">Out of 5.0</div>
          </div>
        </div>
        
        <!-- Matrix Visualization -->
        <div class="lg:col-span-2 bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
          <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-4 text-center">
            Maturity Matrix Overview
          </h3>
          <div class="space-y-3">
            <template x-for="dimension in currentAssessment?.dimensions || []" :key="dimension.id">
              <div class="flex items-center justify-between p-3 bg-primary-50 dark:bg-primary-700 rounded-lg">
                <span class="font-medium text-primary-900 dark:text-primary-100" x-text="dimension.title"></span>
                <div class="flex items-center">
                  <div class="w-4 h-4 rounded-full mr-2" :style="`background-color: ${getLevelColor(dimension.id)}`"></div>
                  <span class="text-sm font-medium text-primary-600 dark:text-primary-300" x-text="getLevelName(dimension.id)"></span>
                </div>
              </div>
            </template>
          </div>
        </div>
      </div>

      <!-- Dimension Breakdown -->
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
        <template x-for="dimension in currentAssessment?.dimensions || []" :key="dimension.id">
          <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
            <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-3" x-text="dimension.title"></h3>
            <div class="flex items-center justify-between mb-2">
              <span class="text-2xl font-bold" :style="`color: ${getLevelColor(dimension.id)}`" x-text="getLevelNumber(dimension.id)"></span>
              <span class="text-sm text-primary-500 dark:text-primary-400" x-text="getLevelName(dimension.id)"></span>
            </div>
            <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2">
              <div 
                class="h-2 rounded-full"
                :style="`width: ${(getLevelNumber(dimension.id) / 5) * 100}%; background-color: ${getLevelColor(dimension.id)}`"
              ></div>
            </div>
          </div>
        </template>
      </div>

      <!-- Actions -->
      <div class="flex flex-wrap gap-4 justify-center">
        <button 
          @click="downloadResults()"
          class="px-6 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-md transition-colors"
        >
          Download Results
        </button>
        <button 
          @click="goBack()"
          class="px-6 py-2 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors"
        >
          Take Another Assessment
        </button>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function matrixAssessment() {
    return {
      isLoading: true,
      availableAssessments: [],
      currentAssessment: null,
      assessmentResult: null,
      showResults: false,
      responses: {},
      startTime: null,

      async initializeMatrix() {
        try {
          this.isLoading = true;
          const response = await fetch('/tech-leadership/assessments/index.json/');
          const allAssessments = await response.json();
          // Filter for matrix assessments
          this.availableAssessments = allAssessments.filter(a => a.type === 'matrix');
        } catch (error) {
          console.error('Failed to initialize matrix:', error);
        } finally {
          this.isLoading = false;
        }
      },

      async startAssessment(assessmentId, assessmentType) {
        try {
          this.isLoading = true;
          const response = await fetch(`/tech-leadership/assessments/${assessmentId}.json/`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          this.currentAssessment = await response.json();
          this.responses = {};
          this.startTime = new Date();
          this.showResults = false;
          
        } catch (error) {
          console.error('Failed to start assessment:', error);
          alert(`Failed to load assessment: ${error.message}`);
        } finally {
          this.isLoading = false;
        }
      },

      updateResponse(dimensionId, levelId) {
        this.responses[dimensionId] = levelId;
      },

      getProgress() {
        if (!this.currentAssessment?.dimensions) return 0;
        return Math.round((Object.keys(this.responses).length / this.currentAssessment.dimensions.length) * 100);
      },

      getDimensionCount() {
        return this.currentAssessment?.dimensions?.length || 0;
      },

      isComplete() {
        if (!this.currentAssessment?.dimensions) return false;
        return Object.keys(this.responses).length >= this.currentAssessment.dimensions.length;
      },

      completeAssessment() {
        if (!this.isComplete()) return;
        
        this.showResults = true;
        this.assessmentResult = {
          id: 'result-' + Date.now(),
          assessmentId: this.currentAssessment.id,
          assessmentTitle: this.currentAssessment.title,
          type: 'matrix',
          responses: this.responses,
          completedAt: new Date(),
          timeSpent: this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0
        };
      },

      goBack() {
        this.currentAssessment = null;
        this.showResults = false;
        this.assessmentResult = null;
      },

      getAverageLevel() {
        if (!this.currentAssessment?.dimensions) return 0;
        
        let total = 0;
        let count = 0;
        
        this.currentAssessment.dimensions.forEach(dimension => {
          const levelId = this.responses[dimension.id];
          if (levelId) {
            const level = this.currentAssessment.maturityLevels.find(l => l.id === levelId);
            if (level) {
              total += level.level;
              count++;
            }
          }
        });
        
        return count > 0 ? (total / count).toFixed(1) : 0;
      },

      getLevelColor(dimensionId) {
        const levelId = this.responses[dimensionId];
        if (!levelId) return '#6b7280';
        
        const level = this.currentAssessment?.maturityLevels?.find(l => l.id === levelId);
        return level?.color || '#6b7280';
      },

      getLevelName(dimensionId) {
        const levelId = this.responses[dimensionId];
        if (!levelId) return 'Not selected';
        
        const level = this.currentAssessment?.maturityLevels?.find(l => l.id === levelId);
        return level?.name || 'Unknown';
      },

      getLevelNumber(dimensionId) {
        const levelId = this.responses[dimensionId];
        if (!levelId) return 0;
        
        const level = this.currentAssessment?.maturityLevels?.find(l => l.id === levelId);
        return level?.level || 0;
      },

      downloadResults() {
        if (!this.assessmentResult) return;
        
        const results = {
          ...this.assessmentResult,
          dimensions: this.currentAssessment?.dimensions?.map(dimension => ({
            id: dimension.id,
            title: dimension.title,
            selectedLevel: this.responses[dimension.id],
            levelName: this.getLevelName(dimension.id),
            levelNumber: this.getLevelNumber(dimension.id),
            color: this.getLevelColor(dimension.id)
          })) || [],
          averageLevel: this.getAverageLevel()
        };
        
        const content = JSON.stringify(results, null, 2);
        const blob = new Blob([content], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `matrix-assessment-${this.assessmentResult.assessmentId}-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    };
  }

  // Make function globally available
  window.matrixAssessment = matrixAssessment;
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>