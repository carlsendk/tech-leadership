---
// Simple Questionnaire Assessment Component
export interface Props {
  assessmentId?: string;
}

const { assessmentId } = Astro.props;
---

<div 
  id="questionnaire-assessment"
  x-data="questionnaireAssessment()"
  x-init="initializeQuestionnaire()"
>
  <!-- Assessment Loading State -->
  <div x-show="isLoading" class="flex items-center justify-center p-8">
    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
    <span class="ml-3 text-primary-600 dark:text-primary-400">Loading assessment...</span>
  </div>

  <!-- Assessment Selection -->
  <div x-show="!isLoading && !currentAssessment && !showResults" class="space-y-8">
    <div class="grid gap-8 md:grid-cols-2">
      <template x-for="assessment in availableAssessments" :key="assessment.id">
        <div class="group bg-white dark:bg-primary-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-primary-100 dark:border-primary-700 overflow-hidden">
          <div class="p-6 pb-4">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                <div class="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
                  <span class="text-blue-600 dark:text-blue-400 text-sm font-bold">üìä</span>
                </div>
                <div class="text-xs font-medium text-primary-500 dark:text-primary-400 uppercase tracking-wide">
                  Questionnaire
                </div>
              </div>
              <span x-text="assessment.category" class="text-xs font-medium bg-primary-100 dark:bg-primary-700 text-primary-600 dark:text-primary-300 px-3 py-1 rounded-full"></span>
            </div>
            
            <h3 class="text-xl font-bold text-primary-900 dark:text-primary-100 mb-3 group-hover:text-accent-600 transition-colors" x-text="assessment.title"></h3>
            <p class="text-primary-600 dark:text-primary-300 text-sm leading-relaxed mb-4" x-text="assessment.description"></p>
            
            <div class="flex items-center text-sm text-primary-500 dark:text-primary-400 mb-6">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span x-text="`${assessment.estimatedTime} minutes`"></span>
            </div>
          </div>
          
          <div class="px-6 pb-6">
            <a 
              :href="`/tech-leadership/assessments/${assessment.id}/`"
              class="flex-1 w-full bg-accent-600 hover:bg-accent-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 text-center block"
            >
              Start Assessment
            </a>
          </div>
        </div>
      </template>
    </div>
  </div>

  <!-- Questionnaire Assessment Content -->
  <div x-show="currentAssessment && !showResults" x-html="renderQuestionnaireContent()"></div>

  <!-- Results Display -->
  <div x-show="showResults && assessmentResult" class="container mx-auto px-4">
    <div class="text-center p-8">
      <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Results</h1>
      <p class="text-primary-600 dark:text-primary-400">Results coming soon...</p>
    </div>
  </div>
</div>

<script is:inline>
  function questionnaireAssessment() {
    return {
      isLoading: true,
      availableAssessments: [],
      currentAssessment: null,
      assessmentResult: null,
      showResults: false,
      currentSectionIndex: 0,
      responses: new Map(),
      startTime: null,

      async initializeQuestionnaire() {
        try {
          this.isLoading = true;
          const response = await fetch('/tech-leadership/assessments/index.json/');
          const allAssessments = await response.json();
          // Filter for questionnaire assessments
          this.availableAssessments = allAssessments.filter(a => 
            a.type === 'questionnaire' || !a.type
          );
        } catch (error) {
          console.error('Failed to initialize questionnaire:', error);
        } finally {
          this.isLoading = false;
        }
      },

      async startAssessment(assessmentId, assessmentType) {
        try {
          this.isLoading = true;
          const response = await fetch(`/tech-leadership/assessments/${assessmentId}.json/`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          this.currentAssessment = await response.json();
          this.currentSectionIndex = 0;
          this.responses = new Map();
          this.startTime = new Date();
          this.showResults = false;
          
        } catch (error) {
          console.error('Failed to start assessment:', error);
          alert(`Failed to load assessment: ${error.message}`);
        } finally {
          this.isLoading = false;
        }
      },

      renderQuestionnaireContent() {
        if (!this.currentAssessment) return '';
        
        const currentSection = this.currentAssessment.sections[this.currentSectionIndex] || null;
        const progressPercentage = Math.round(((this.currentSectionIndex + 1) / this.currentAssessment.sections.length) * 100);
        
        return `
          <div class="max-w-4xl mx-auto">
            <!-- Progress Header -->
            <div class="mb-8">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100">${this.currentAssessment.title}</h2>
                <button onclick="document.getElementById('questionnaire-assessment').__x.$data.goBack()" class="text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors">
                  ‚Üê Back
                </button>
              </div>
              
              <!-- Progress Bar -->
              <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
                <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" style="width: ${progressPercentage}%"></div>
              </div>
              <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
                <span>Section ${this.currentSectionIndex + 1} of ${this.currentAssessment.sections.length}</span>
                <span>${progressPercentage}% complete</span>
              </div>
            </div>

            <!-- Current Section -->
            ${currentSection ? this.renderSection(currentSection) : ''}
          </div>
        `;
      },

      renderSection(section) {
        const questionsHtml = section.questions.map((question, qIndex) => {
          return this.renderQuestion(question, qIndex);
        }).join('');

        return `
          <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-8">
            <div class="mb-6">
              <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2">${section.title}</h3>
              <p class="text-primary-600 dark:text-primary-300">${section.description}</p>
            </div>

            <!-- Questions -->
            <div class="space-y-6">
              ${questionsHtml}
            </div>

            <!-- Navigation -->
            <div class="flex justify-between mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
              ${this.currentSectionIndex > 0 ? `
                <button onclick="document.getElementById('questionnaire-assessment').__x.$data.previousSection()" class="flex items-center px-4 py-2 text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-200 transition-colors">
                  ‚Üê Previous Section
                </button>
              ` : '<div></div>'}
              
              ${this.currentSectionIndex < this.currentAssessment.sections.length - 1 ? `
                <button onclick="document.getElementById('questionnaire-assessment').__x.$data.nextSection()" class="flex items-center px-6 py-2 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors">
                  Next Section ‚Üí
                </button>
              ` : `
                <button onclick="document.getElementById('questionnaire-assessment').__x.$data.completeAssessment()" class="flex items-center px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors">
                  Complete Assessment
                </button>
              `}
            </div>
          </div>
        `;
      },

      renderQuestion(question, qIndex) {
        const currentValue = this.responses.get(question.id) || '';
        
        let inputHtml = '';
        if (question.type === 'scale') {
          inputHtml = this.renderScaleQuestion(question, currentValue);
        }

        return `
          <div class="border-b border-primary-200 dark:border-primary-600 pb-6 last:border-b-0">
            <div class="mb-4">
              <label class="block text-lg font-medium text-primary-900 dark:text-primary-100 mb-2">${question.text}</label>
              ${question.helpText ? `<p class="text-sm text-primary-500 dark:text-primary-400">${question.helpText}</p>` : ''}
            </div>
            ${inputHtml}
          </div>
        `;
      },

      renderScaleQuestion(question, currentValue) {
        const values = Array.from({length: question.max - question.min + 1}, (_, i) => i + question.min);
        
        return `
          <div class="space-y-4">
            <div class="flex justify-between text-sm text-primary-600 dark:text-primary-300 mb-3">
              <span class="font-medium">${question.labels?.[0] || ''}</span>
              <span class="font-medium">${question.labels?.[question.labels.length - 1] || ''}</span>
            </div>
            <div class="grid grid-cols-5 gap-4 max-w-lg mx-auto">
              ${values.map(value => `
                <label class="flex flex-col items-center cursor-pointer group">
                  <input 
                    type="radio" 
                    name="${question.id}"
                    value="${value}"
                    onchange="document.getElementById('questionnaire-assessment').__x.$data.updateResponse('${question.id}', ${value})"
                    ${currentValue == value ? 'checked' : ''}
                    class="sr-only"
                  />
                  <div class="w-14 h-14 rounded-full border-2 flex items-center justify-center transition-all duration-200 mb-2 ${currentValue == value ? 'border-accent-600 bg-accent-600 text-white shadow-lg scale-105' : 'border-primary-300 dark:border-primary-600 group-hover:border-accent-400 group-hover:scale-105'}">
                    <span class="text-sm font-semibold">${value}</span>
                  </div>
                  <span class="text-xs text-center text-primary-500 dark:text-primary-400 leading-tight max-w-20 h-8 flex items-center justify-center">${question.labels?.[value - question.min] || ''}</span>
                </label>
              `).join('')}
            </div>
          </div>
        `;
      },

      updateResponse(questionId, value) {
        this.responses.set(questionId, value);
      },

      nextSection() {
        if (this.isSectionComplete() && this.currentSectionIndex < this.currentAssessment.sections.length - 1) {
          this.currentSectionIndex++;
          // Re-render
          const container = document.querySelector('#questionnaire-assessment [x-html]');
          if (container) {
            container.innerHTML = this.renderQuestionnaireContent();
          }
        }
      },

      previousSection() {
        if (this.currentSectionIndex > 0) {
          this.currentSectionIndex--;
          // Re-render
          const container = document.querySelector('#questionnaire-assessment [x-html]');
          if (container) {
            container.innerHTML = this.renderQuestionnaireContent();
          }
        }
      },

      isSectionComplete() {
        if (!this.currentAssessment) return false;
        
        const currentSection = this.currentAssessment.sections[this.currentSectionIndex];
        if (!currentSection) return false;
        
        const requiredQuestions = currentSection.questions.filter(q => q.required);
        return requiredQuestions.every(q => this.responses.has(q.id) && this.responses.get(q.id) !== '');
      },

      completeAssessment() {
        if (!this.isSectionComplete()) return;
        
        this.showResults = true;
        this.assessmentResult = {
          id: 'result-' + Date.now(),
          assessmentId: this.currentAssessment.id,
          assessmentTitle: this.currentAssessment.title,
          type: 'questionnaire',
          completedAt: new Date(),
          timeSpent: this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0
        };
      },

      goBack() {
        this.currentAssessment = null;
        this.showResults = false;
        this.assessmentResult = null;
      }
    };
  }

  // Make function globally available
  window.questionnaireAssessment = questionnaireAssessment;
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>