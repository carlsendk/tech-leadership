---
// Interactive Calculators and Tools for Engineering Practices
---

<div id="interactive-calculators" class="space-y-8">
  <!-- Section Header -->
  <div class="text-center mb-8">
    <h2 class="text-3xl font-bold text-primary-900 dark:text-primary-100 mb-4">
      Interactive Engineering Tools
    </h2>
    <p class="text-lg text-primary-600 dark:text-primary-400 max-w-3xl mx-auto">
      Practical calculators and tools to help you measure and improve your engineering practices.
    </p>
  </div>

  <!-- Calculators Grid -->
  <div class="grid gap-8 md:grid-cols-2">
    <!-- DORA Metrics Calculator -->
    <div 
      class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6"
      x-data="doraCalculator()"
    >
      <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-4">
        DORA Metrics Calculator
      </h3>
      <p class="text-sm text-primary-600 dark:text-primary-300 mb-6">
        Calculate your DevOps Research and Assessment (DORA) metrics to benchmark your team's performance.
      </p>

      <div class="space-y-4">
        <!-- Deployment Frequency -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Deployments per week
          </label>
          <input
            type="number"
            x-model="deploymentsPerWeek"
            @input="calculateDORA()"
            min="0"
            step="0.1"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 5"
          />
          <p x-show="errors.deploymentsPerWeek" x-text="errors.deploymentsPerWeek" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Lead Time -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Lead time (hours from commit to production)
          </label>
          <input
            type="number"
            x-model="leadTimeHours"
            @input="calculateDORA()"
            min="0"
            step="0.5"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 24"
          />
          <p x-show="errors.leadTimeHours" x-text="errors.leadTimeHours" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- MTTR -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Mean Time to Recovery (hours)
          </label>
          <input
            type="number"
            x-model="mttrHours"
            @input="calculateDORA()"
            min="0"
            step="0.5"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 2"
          />
          <p x-show="errors.mttrHours" x-text="errors.mttrHours" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Change Failure Rate -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Change failure rate (%)
          </label>
          <input
            type="number"
            x-model="changeFailureRate"
            @input="calculateDORA()"
            min="0"
            max="100"
            step="1"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 15"
          />
          <p x-show="errors.changeFailureRate" x-text="errors.changeFailureRate" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Results -->
        <div x-show="doraResults" class="mt-6 p-4 bg-primary-50 dark:bg-primary-700 rounded-lg">
          <h4 class="font-semibold text-primary-900 dark:text-primary-100 mb-3">DORA Performance Level</h4>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span>Overall Rating:</span>
              <span class="font-medium" :class="getRatingColor(doraResults?.overall)" x-text="doraResults?.overall"></span>
            </div>
            <div class="grid grid-cols-2 gap-2 mt-3 text-xs">
              <div>Deployment Frequency: <span :class="getRatingColor(doraResults?.deploymentFreq)" x-text="doraResults?.deploymentFreq"></span></div>
              <div>Lead Time: <span :class="getRatingColor(doraResults?.leadTime)" x-text="doraResults?.leadTime"></span></div>
              <div>MTTR: <span :class="getRatingColor(doraResults?.mttr)" x-text="doraResults?.mttr"></span></div>
              <div>Change Failure Rate: <span :class="getRatingColor(doraResults?.changeFailure)" x-text="doraResults?.changeFailure"></span></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Technical Debt Calculator -->
    <div 
      class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6"
      x-data="techDebtCalculator()"
    >
      <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-4">
        Technical Debt Calculator
      </h3>
      <p class="text-sm text-primary-600 dark:text-primary-300 mb-6">
        Estimate the cost impact of technical debt on your development velocity.
      </p>

      <div class="space-y-4">
        <!-- Team Size -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Team size (developers)
          </label>
          <input
            type="number"
            x-model="teamSize"
            @input="calculateTechDebt()"
            min="1"
            step="1"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 8"
          />
          <p x-show="errors.teamSize" x-text="errors.teamSize" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Average Salary -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Average developer salary (annual)
          </label>
          <input
            type="number"
            x-model="avgSalary"
            @input="calculateTechDebt()"
            min="0"
            step="1000"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 100000"
          />
          <p x-show="errors.avgSalary" x-text="errors.avgSalary" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Tech Debt Tax -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Technical debt tax (% of time spent on debt)
          </label>
          <input
            type="number"
            x-model="techDebtTax"
            @input="calculateTechDebt()"
            min="0"
            max="100"
            step="5"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 30"
          />
          <p x-show="errors.techDebtTax" x-text="errors.techDebtTax" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Results -->
        <div x-show="techDebtResults" class="mt-6 p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
          <h4 class="font-semibold text-primary-900 dark:text-primary-100 mb-3">Annual Cost Impact</h4>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span>Annual cost of technical debt:</span>
              <span class="font-medium text-red-600 dark:text-red-400" x-text="techDebtResults?.annualCost"></span>
            </div>
            <div class="flex justify-between">
              <span>Lost velocity (hours/year):</span>
              <span class="font-medium" x-text="techDebtResults?.lostHours"></span>
            </div>
            <div class="flex justify-between">
              <span>Equivalent developer time:</span>
              <span class="font-medium" x-text="techDebtResults?.equivalentDevs"></span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Incident Cost Calculator -->
    <div 
      class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6"
      x-data="incidentCostCalculator()"
    >
      <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-4">
        Incident Cost Calculator
      </h3>
      <p class="text-sm text-primary-600 dark:text-primary-300 mb-6">
        Calculate the true cost of system incidents including revenue loss, team time, and reputation impact.
      </p>

      <div class="space-y-4">
        <!-- Incident Duration -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Incident duration (hours)
          </label>
          <input
            type="number"
            x-model="incidentDuration"
            @input="calculateIncidentCost()"
            min="0"
            step="0.5"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 2.5"
          />
          <p x-show="errors.incidentDuration" x-text="errors.incidentDuration" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Revenue per Hour -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Revenue per hour (when system is operational)
          </label>
          <input
            type="number"
            x-model="revenuePerHour"
            @input="calculateIncidentCost()"
            min="0"
            step="100"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 10000"
          />
          <p x-show="errors.revenuePerHour" x-text="errors.revenuePerHour" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- People Involved -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Number of people involved in resolution
          </label>
          <input
            type="number"
            x-model="peopleInvolved"
            @input="calculateIncidentCost()"
            min="1"
            step="1"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 5"
          />
          <p x-show="errors.peopleInvolved" x-text="errors.peopleInvolved" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Average Hourly Rate -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Average hourly rate of responders
          </label>
          <input
            type="number"
            x-model="avgHourlyRate"
            @input="calculateIncidentCost()"
            min="0"
            step="5"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 75"
          />
          <p x-show="errors.avgHourlyRate" x-text="errors.avgHourlyRate" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Customer Impact -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Customer impact level
          </label>
          <select
            x-model="customerImpact"
            @change="calculateIncidentCost()"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
          >
            <option value="">Select impact</option>
            <option value="1">Low - Minor features affected</option>
            <option value="2">Medium - Some features unavailable</option>
            <option value="3">High - Major features down</option>
            <option value="4">Critical - Complete service outage</option>
          </select>
          <p x-show="errors.customerImpact" x-text="errors.customerImpact" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Results -->
        <div x-show="incidentCostResults" class="mt-6 p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
          <h4 class="font-semibold text-primary-900 dark:text-primary-100 mb-3">Incident Cost Breakdown</h4>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span>Revenue loss:</span>
              <span class="font-medium text-red-600 dark:text-red-400" x-text="incidentCostResults?.revenueLoss"></span>
            </div>
            <div class="flex justify-between">
              <span>Response team cost:</span>
              <span class="font-medium" x-text="incidentCostResults?.teamCost"></span>
            </div>
            <div class="flex justify-between">
              <span>Customer impact multiplier:</span>
              <span class="font-medium" x-text="incidentCostResults?.impactMultiplier"></span>
            </div>
            <div class="border-t pt-2 mt-2">
              <div class="flex justify-between font-semibold">
                <span>Total estimated cost:</span>
                <span class="text-red-600 dark:text-red-400" x-text="incidentCostResults?.totalCost"></span>
              </div>
            </div>
            <div class="mt-3">
              <div class="text-xs text-primary-600 dark:text-primary-400">
                <strong>Note:</strong> This excludes long-term reputation damage, customer churn, and regulatory costs.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Code Quality Score -->
    <div 
      class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6"
      x-data="codeQualityCalculator()"
    >
      <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-4">
        Code Quality Score
      </h3>
      <p class="text-sm text-primary-600 dark:text-primary-300 mb-6">
        Calculate your overall code quality score based on multiple metrics.
      </p>

      <div class="space-y-4">
        <!-- Test Coverage -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Test coverage (%)
          </label>
          <input
            type="number"
            x-model="testCoverage"
            @input="calculateCodeQuality()"
            min="0"
            max="100"
            step="1"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 85"
          />
          <p x-show="errors.testCoverage" x-text="errors.testCoverage" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Code Review Coverage -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Code review coverage (%)
          </label>
          <input
            type="number"
            x-model="codeReviewCoverage"
            @input="calculateCodeQuality()"
            min="0"
            max="100"
            step="1"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 95"
          />
          <p x-show="errors.codeReviewCoverage" x-text="errors.codeReviewCoverage" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Static Analysis Score -->
        <div>
          <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
            Static analysis score (0-100)
          </label>
          <input
            type="number"
            x-model="staticAnalysisScore"
            @input="calculateCodeQuality()"
            min="0"
            max="100"
            step="1"
            class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
            placeholder="e.g., 85"
          />
          <p x-show="errors.staticAnalysisScore" x-text="errors.staticAnalysisScore" class="text-red-600 text-xs mt-1"></p>
        </div>

        <!-- Results -->
        <div x-show="codeQualityResults" class="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
          <h4 class="font-semibold text-primary-900 dark:text-primary-100 mb-3">Quality Assessment</h4>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between">
              <span>Overall quality score:</span>
              <span class="font-medium text-blue-600 dark:text-blue-400" x-text="codeQualityResults?.overallScore + '/100'"></span>
            </div>
            <div class="flex justify-between">
              <span>Quality level:</span>
              <span class="font-medium" x-text="codeQualityResults?.level"></span>
            </div>
            <div class="mt-3">
              <div class="text-xs text-primary-600 dark:text-primary-400 mb-1">Score breakdown:</div>
              <div class="text-xs space-y-1">
                <div>Test Coverage: <span x-text="codeQualityResults?.testScore"></span></div>
                <div>Code Review: <span x-text="codeQualityResults?.reviewScore"></span></div>
                <div>Static Analysis: <span x-text="codeQualityResults?.staticScore"></span></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function doraCalculator() {
    return {
      deploymentsPerWeek: '',
      leadTimeHours: '',
      mttrHours: '',
      changeFailureRate: '',
      doraResults: null,
      errors: {},

      validateNumber(value, field, opts = {}) {
        const { min = 0, max } = opts;
        if (value === '' || value === null) {
          this.errors[field] = '';
          return null;
        }
        const num = parseFloat(value);
        if (!Number.isFinite(num) || num < min) {
          this.errors[field] = min > 0 ? `Please enter a number ≥ ${min}` : 'Please enter a valid non-negative number';
          return null;
        }
        if (max !== undefined && num > max) {
          this.errors[field] = 'Percentage cannot exceed 100';
          return null;
        }
        this.errors[field] = '';
        return num;
      },

      calculateDORA() {
        const deployments = this.validateNumber(this.deploymentsPerWeek, 'deploymentsPerWeek');
        const lead = this.validateNumber(this.leadTimeHours, 'leadTimeHours');
        const mttr = this.validateNumber(this.mttrHours, 'mttrHours');
        const changeFailure = this.validateNumber(this.changeFailureRate, 'changeFailureRate', { max: 100 });

        if ([deployments, lead, mttr, changeFailure].some(v => v === null)) {
          this.doraResults = null;
          return;
        }

        const deploymentFreq = this.getDeploymentFreqRating(deployments);
        const leadTime = this.getLeadTimeRating(lead);
        const mttrRating = this.getMTTRRating(mttr);
        const changeFailureRating = this.getChangeFailureRating(changeFailure);

        const ratings = [deploymentFreq, leadTime, mttrRating, changeFailureRating];
        const overall = this.getOverallRating(ratings);

        this.doraResults = {
          overall,
          deploymentFreq,
          leadTime,
          mttr: mttrRating,
          changeFailure: changeFailureRating
        };
      },

      getDeploymentFreqRating(deploymentsPerWeek) {
        if (deploymentsPerWeek >= 7) return 'Elite';
        if (deploymentsPerWeek >= 1) return 'High';
        if (deploymentsPerWeek >= 0.25) return 'Medium';
        return 'Low';
      },

      getLeadTimeRating(hours) {
        if (hours <= 1) return 'Elite';
        if (hours <= 24) return 'High';
        if (hours <= 168) return 'Medium'; // 1 week
        return 'Low';
      },

      getMTTRRating(hours) {
        if (hours <= 1) return 'Elite';
        if (hours <= 24) return 'High';
        if (hours <= 168) return 'Medium'; // 1 week
        return 'Low';
      },

      getChangeFailureRating(percentage) {
        if (percentage <= 5) return 'Elite';
        if (percentage <= 10) return 'High';
        if (percentage <= 15) return 'Medium';
        return 'Low';
      },

      getOverallRating(ratings) {
        const eliteCount = ratings.filter(r => r === 'Elite').length;
        const highCount = ratings.filter(r => r === 'High').length;
        
        if (eliteCount >= 3) return 'Elite';
        if (eliteCount + highCount >= 3) return 'High';
        if (ratings.filter(r => r === 'Low').length <= 1) return 'Medium';
        return 'Low';
      },

      getRatingColor(rating) {
        switch (rating) {
          case 'Elite': return 'text-green-600 dark:text-green-400';
          case 'High': return 'text-blue-600 dark:text-blue-400';
          case 'Medium': return 'text-yellow-600 dark:text-yellow-400';
          case 'Low': return 'text-red-600 dark:text-red-400';
          default: return '';
        }
      }
    };
  }

  function techDebtCalculator() {
    return {
      teamSize: '',
      avgSalary: '',
      techDebtTax: '',
      techDebtResults: null,
      errors: {},

      validateNumber(value, field, opts = {}) {
        const { min = 0, max } = opts;
        if (value === '' || value === null) {
          this.errors[field] = '';
          return null;
        }
        const num = parseFloat(value);
        if (!Number.isFinite(num) || num < min) {
          this.errors[field] = min > 0 ? `Please enter a number ≥ ${min}` : 'Please enter a valid non-negative number';
          return null;
        }
        if (max !== undefined && num > max) {
          this.errors[field] = 'Percentage cannot exceed 100';
          return null;
        }
        this.errors[field] = '';
        return num;
      },

      calculateTechDebt() {
        const size = this.validateNumber(this.teamSize, 'teamSize', { min: 1 });
        const salary = this.validateNumber(this.avgSalary, 'avgSalary');
        const tax = this.validateNumber(this.techDebtTax, 'techDebtTax', { max: 100 });

        if ([size, salary, tax].some(v => v === null)) {
          this.techDebtResults = null;
          return;
        }

        const debtTax = tax / 100;
        const totalSalaryCost = size * salary;
        const annualCost = totalSalaryCost * debtTax;
        const workingHoursPerYear = 2080; // Standard work year
        const lostHours = size * workingHoursPerYear * debtTax;
        const equivalentDevs = lostHours / workingHoursPerYear;

        this.techDebtResults = {
          annualCost: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(annualCost),
          lostHours: Math.round(lostHours).toLocaleString(),
          equivalentDevs: equivalentDevs.toFixed(1) + ' FTE'
        };
      }
    };
  }

  function incidentCostCalculator() {
    return {
      incidentDuration: '',
      revenuePerHour: '',
      peopleInvolved: '',
      avgHourlyRate: '',
      customerImpact: '',
      incidentCostResults: null,
      errors: {},

      validateNumber(value, field, opts = {}) {
        const { min = 0, max } = opts;
        if (value === '' || value === null) {
          this.errors[field] = '';
          return null;
        }
        const num = parseFloat(value);
        if (!Number.isFinite(num) || num < min) {
          this.errors[field] = min > 0 ? `Please enter a number ≥ ${min}` : 'Please enter a valid non-negative number';
          return null;
        }
        if (max !== undefined && num > max) {
          this.errors[field] = `Value cannot exceed ${max}`;
          return null;
        }
        this.errors[field] = '';
        return num;
      },

      calculateIncidentCost() {
        const duration = this.validateNumber(this.incidentDuration, 'incidentDuration');
        const revenue = this.validateNumber(this.revenuePerHour, 'revenuePerHour');
        const people = this.validateNumber(this.peopleInvolved, 'peopleInvolved', { min: 1 });
        const rate = this.validateNumber(this.avgHourlyRate, 'avgHourlyRate');
        const impactVal = this.customerImpact ? parseInt(this.customerImpact) : null;
        if (!impactVal) {
          this.errors.customerImpact = 'Please select an impact level';
        } else {
          this.errors.customerImpact = '';
        }

        if ([duration, revenue, people, rate, impactVal].some(v => v === null) || this.errors.customerImpact) {
          this.incidentCostResults = null;
          return;
        }

        // Calculate direct costs
        const revenueLoss = duration * revenue;
        const teamCost = duration * people * rate;

        // Impact multipliers based on customer impact
        const impactMultipliers = {
          1: 1.2,  // Low impact - minor additional costs
          2: 1.5,  // Medium impact - some customer service costs
          3: 2.0,  // High impact - significant customer service + potential SLA penalties
          4: 3.0   // Critical - major customer service + SLA penalties + potential legal costs
        };

        const multiplier = impactMultipliers[impactVal] || 1;
        const totalDirectCost = revenueLoss + teamCost;
        const totalCost = totalDirectCost * multiplier;

        this.incidentCostResults = {
          revenueLoss: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(revenueLoss),
          teamCost: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(teamCost),
          impactMultiplier: multiplier + 'x',
          totalCost: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(totalCost)
        };
      }
    };
  }

  function codeQualityCalculator() {
    return {
      testCoverage: '',
      codeReviewCoverage: '',
      staticAnalysisScore: '',
      codeQualityResults: null,
      errors: {},

      validateNumber(value, field, opts = {}) {
        const { min = 0, max } = opts;
        if (value === '' || value === null) {
          this.errors[field] = '';
          return null;
        }
        const num = parseFloat(value);
        if (!Number.isFinite(num) || num < min) {
          this.errors[field] = min > 0 ? `Please enter a number ≥ ${min}` : 'Please enter a valid non-negative number';
          return null;
        }
        if (max !== undefined && num > max) {
          this.errors[field] = 'Percentage cannot exceed 100';
          return null;
        }
        this.errors[field] = '';
        return num;
      },

      calculateCodeQuality() {
        const testScore = this.validateNumber(this.testCoverage, 'testCoverage', { max: 100 });
        const reviewScore = this.validateNumber(this.codeReviewCoverage, 'codeReviewCoverage', { max: 100 });
        const staticScore = this.validateNumber(this.staticAnalysisScore, 'staticAnalysisScore', { max: 100 });

        if ([testScore, reviewScore, staticScore].some(v => v === null)) {
          this.codeQualityResults = null;
          return;
        }

        // Weighted average: Test 40%, Review 30%, Static 30%
        const overallScore = Math.round(
          testScore * 0.4 + reviewScore * 0.3 + staticScore * 0.3
        );

        const level = overallScore >= 90 ? 'Excellent' :
                     overallScore >= 80 ? 'Good' :
                     overallScore >= 70 ? 'Fair' :
                     overallScore >= 60 ? 'Poor' : 'Critical';

        this.codeQualityResults = {
          overallScore,
          level,
          testScore: testScore.toFixed(0),
          reviewScore: reviewScore.toFixed(0),
          staticScore: staticScore.toFixed(0)
        };
      }
    };
  }

  // Make functions globally available
  window.doraCalculator = doraCalculator;
  window.techDebtCalculator = techDebtCalculator;
  window.incidentCostCalculator = incidentCostCalculator;
  window.codeQualityCalculator = codeQualityCalculator;
</script>
