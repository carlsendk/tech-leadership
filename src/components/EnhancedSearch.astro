---
// Enhanced Search Component with Fuse.js
---

<div 
  class="enhanced-search-container" 
  x-data="enhancedSearch()"
  x-init="initializeSearch()"
>
  <!-- Search Input -->
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg class="h-5 w-5 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
    <input
      type="text"
      placeholder="Search articles, wiki pages, and topics..."
      class="block w-full pl-10 pr-3 py-2 border border-primary-300 dark:border-primary-600 rounded-md leading-5 bg-white dark:bg-primary-800 text-primary-900 dark:text-primary-100 placeholder-primary-500 dark:placeholder-primary-400 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:border-accent-500"
      x-model="searchQuery"
      @input="performSearch()"
      @focus="showResults = true"
      @keydown.escape="showResults = false"
    />
    
    <!-- Loading Indicator -->
    <div x-show="isLoading" class="absolute inset-y-0 right-0 pr-3 flex items-center">
      <svg class="animate-spin h-4 w-4 text-primary-400" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </div>
  </div>

  <!-- Search Filters -->
  <div x-show="showFilters" class="mt-4 p-4 bg-primary-50 dark:bg-primary-800 rounded-lg">
    <div class="flex flex-wrap items-center gap-4">
      <!-- Content Type Filter -->
      <div class="flex items-center gap-2">
        <label class="text-sm font-medium text-primary-700 dark:text-primary-300">Type:</label>
        <select 
          x-model="filters.type" 
          @change="performSearch()"
          class="text-sm border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        >
          <option value="">All</option>
          <option value="blog">Blog Posts</option>
          <option value="wiki">Wiki Pages</option>
        </select>
      </div>

      <!-- Category Filter -->
      <div class="flex items-center gap-2">
        <label class="text-sm font-medium text-primary-700 dark:text-primary-300">Category:</label>
        <select 
          x-model="filters.category" 
          @change="performSearch()"
          class="text-sm border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        >
          <option value="">All Categories</option>
          <template x-for="category in availableCategories" :key="category">
            <option :value="category" x-text="category"></option>
          </template>
        </select>
      </div>

      <!-- Clear Filters -->
      <button 
        @click="clearFilters()"
        class="text-sm text-accent-600 dark:text-accent-400 hover:text-accent-700 dark:hover:text-accent-300 transition-colors"
      >
        Clear Filters
      </button>
    </div>
  </div>

  <!-- Results Dropdown -->
  <div 
    x-show="showResults && (searchQuery.length > 0 || searchResults.length > 0)"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 translate-y-1"
    x-transition:enter-end="opacity-100 translate-y-0"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 translate-y-0"
    x-transition:leave-end="opacity-0 translate-y-1"
    class="absolute z-50 mt-1 w-full bg-white dark:bg-primary-800 rounded-md shadow-lg border border-primary-200 dark:border-primary-600 max-h-96 overflow-y-auto"
  >
    <!-- Search Stats -->
    <div x-show="searchQuery.length > 0" class="px-4 py-2 border-b border-primary-200 dark:border-primary-600">
      <div class="flex items-center justify-between">
        <p class="text-sm text-primary-600 dark:text-primary-400">
          <span x-text="searchResults.length"></span> results
          <span x-show="searchQuery.length > 0">for "<span x-text="searchQuery"></span>"</span>
        </p>
        <button 
          @click="showFilters = !showFilters"
          class="text-sm text-accent-600 dark:text-accent-400 hover:text-accent-700 dark:hover:text-accent-300 transition-colors flex items-center gap-1"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z"></path>
          </svg>
          Filters
        </button>
      </div>
    </div>

    <!-- Search Results -->
    <div class="py-2">
      <template x-for="(result, index) in searchResults.slice(0, 10)" :key="result.item.id">
        <a 
          :href="result.item.url"
          class="block px-4 py-3 hover:bg-primary-50 dark:hover:bg-primary-700 transition-colors cursor-pointer"
          @click="trackSearchClick(result.item)"
        >
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-1">
                <span 
                  class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium"
                  :class="result.item.type === 'blog' ? 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100' : 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100'"
                  x-text="result.item.type === 'blog' ? 'Blog' : 'Wiki'"
                ></span>
                <span class="text-xs text-primary-500 dark:text-primary-400" x-text="result.item.category"></span>
              </div>
              <h3 class="text-sm font-medium text-primary-900 dark:text-primary-100 line-clamp-1" x-text="result.item.title"></h3>
              <p class="text-sm text-primary-600 dark:text-primary-300 line-clamp-2 mt-1" x-text="result.item.description"></p>
              
              <!-- Search Match Highlights -->
              <div x-show="result.matches && result.matches.length > 0" class="mt-2">
                <template x-for="match in result.matches.slice(0, 2)" :key="match.key">
                  <div class="text-xs text-primary-500 dark:text-primary-400">
                    <span class="font-medium" x-text="match.key + ':'"></span>
                    <span x-text="getMatchPreview(match)"></span>
                  </div>
                </template>
              </div>
            </div>
            <div class="ml-2 text-xs text-primary-400">
              <span x-text="Math.round((1 - result.score) * 100) + '%'"></span>
            </div>
          </div>
        </a>
      </template>

      <!-- No Results -->
      <div x-show="searchQuery.length > 0 && searchResults.length === 0 && !isLoading" class="px-4 py-6 text-center">
        <svg class="mx-auto h-12 w-12 text-primary-300 dark:text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-primary-900 dark:text-primary-100">No results found</h3>
        <p class="mt-1 text-sm text-primary-500 dark:text-primary-400">Try different keywords or remove filters.</p>
      </div>

      <!-- Popular Searches (when no query) -->
      <div x-show="searchQuery.length === 0" class="px-4 py-2">
        <h4 class="text-sm font-medium text-primary-700 dark:text-primary-300 mb-2">Popular Topics</h4>
        <div class="flex flex-wrap gap-2">
          <template x-for="topic in popularTopics" :key="topic">
            <button 
              @click="searchQuery = topic; performSearch()"
              class="text-xs px-2 py-1 bg-primary-100 dark:bg-primary-700 text-primary-700 dark:text-primary-300 rounded hover:bg-primary-200 dark:hover:bg-primary-600 transition-colors"
              x-text="topic"
            ></button>
          </template>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import Fuse from 'fuse.js';

  function enhancedSearch() {
    return {
      searchQuery: '',
      searchResults: [],
      searchIndex: [],
      fuse: null,
      isLoading: false,
      showResults: false,
      showFilters: false,
      filters: {
        type: '',
        category: ''
      },
      availableCategories: [],
      popularTopics: [
        'engineering practices',
        'team topologies', 
        'leadership',
        'autonomous teams',
        'culture',
        'golden path',
        'maturity model'
      ],

      async initializeSearch() {
        try {
          this.isLoading = true;
          
          // Fetch search index
          const response = await fetch('/tech-leadership/search/index.json');
          this.searchIndex = await response.json();
          
          // Extract unique categories
          this.availableCategories = [...new Set(this.searchIndex.map(item => item.category))].sort();
          
          // Initialize Fuse.js
          this.fuse = new Fuse(this.searchIndex, {
            keys: [
              { name: 'title', weight: 0.3 },
              { name: 'description', weight: 0.2 },
              { name: 'content', weight: 0.4 },
              { name: 'tags', weight: 0.1 }
            ],
            threshold: 0.3,
            includeMatches: true,
            includeScore: true,
            minMatchCharLength: 2
          });
          
        } catch (error) {
          console.error('Failed to initialize search:', error);
        } finally {
          this.isLoading = false;
        }
      },

      performSearch() {
        if (!this.fuse || this.searchQuery.length < 2) {
          this.searchResults = [];
          return;
        }

        let results = this.fuse.search(this.searchQuery);
        
        // Apply filters
        if (this.filters.type) {
          results = results.filter(result => result.item.type === this.filters.type);
        }
        
        if (this.filters.category) {
          results = results.filter(result => result.item.category === this.filters.category);
        }
        
        this.searchResults = results;
        
        // Track search analytics (local storage)
        this.trackSearch(this.searchQuery, results.length);
      },

      clearFilters() {
        this.filters.type = '';
        this.filters.category = '';
        this.performSearch();
      },

      getMatchPreview(match) {
        if (!match.value) return '';
        
        const indices = match.indices[0];
        if (!indices) return match.value.substring(0, 50) + '...';
        
        const [start, end] = indices;
        const before = match.value.substring(Math.max(0, start - 20), start);
        const highlighted = match.value.substring(start, end + 1);
        const after = match.value.substring(end + 1, Math.min(match.value.length, end + 21));
        
        return `...${before}**${highlighted}**${after}...`;
      },

      trackSearch(query, resultCount) {
        try {
          const searches = JSON.parse(localStorage.getItem('searchHistory') || '[]');
          searches.unshift({
            query,
            resultCount,
            timestamp: new Date().toISOString()
          });
          
          // Keep only last 50 searches
          localStorage.setItem('searchHistory', JSON.stringify(searches.slice(0, 50)));
        } catch (error) {
          console.warn('Failed to track search:', error);
        }
      },

      trackSearchClick(item) {
        try {
          const clicks = JSON.parse(localStorage.getItem('searchClicks') || '[]');
          clicks.unshift({
            query: this.searchQuery,
            itemId: item.id,
            itemTitle: item.title,
            itemType: item.type,
            timestamp: new Date().toISOString()
          });
          
          // Keep only last 100 clicks
          localStorage.setItem('searchClicks', JSON.stringify(clicks.slice(0, 100)));
        } catch (error) {
          console.warn('Failed to track search click:', error);
        }
      }
    }
  }

  // Make function globally available
  window.enhancedSearch = enhancedSearch;
</script>

<style>
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>