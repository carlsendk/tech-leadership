<div
  class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6"
  x-data="incidentCostCalculator()"
>
  <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-4">
    Incident Cost Calculator
  </h3>
  <p class="text-sm text-primary-600 dark:text-primary-300 mb-6">
    Calculate the true cost of system incidents including revenue loss, team time, and reputation impact.
  </p>

  <div class="space-y-4">
    <!-- Incident Duration -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Incident duration (hours)
      </label>
      <input
        type="number"
        x-model="incidentDuration"
        @input="calculate()"
        min="0"
        step="0.5"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        placeholder="e.g., 2.5"
      />
      <p x-show="errors.incidentDuration" x-text="errors.incidentDuration" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- Revenue per Hour -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Revenue per hour (when system is operational)
      </label>
      <input
        type="number"
        x-model="revenuePerHour"
        @input="calculate()"
        min="0"
        step="100"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        placeholder="e.g., 10000"
      />
      <p x-show="errors.revenuePerHour" x-text="errors.revenuePerHour" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- People Involved -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Number of people involved in resolution
      </label>
      <input
        type="number"
        x-model="peopleInvolved"
        @input="calculate()"
        min="1"
        step="1"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        placeholder="e.g., 5"
      />
      <p x-show="errors.peopleInvolved" x-text="errors.peopleInvolved" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- Average Hourly Rate -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Average hourly rate of responders
      </label>
      <input
        type="number"
        x-model="avgHourlyRate"
        @input="calculate()"
        min="0"
        step="5"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        placeholder="e.g., 75"
      />
      <p x-show="errors.avgHourlyRate" x-text="errors.avgHourlyRate" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- Customer Impact -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Customer impact level
      </label>
      <select
        x-model="customerImpact"
        @change="calculate()"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
      >
        <option value="">Select impact</option>
        <option value="1">Low - Minor features affected</option>
        <option value="2">Medium - Some features unavailable</option>
        <option value="3">High - Major features down</option>
        <option value="4">Critical - Complete service outage</option>
      </select>
      <p x-show="errors.customerImpact" x-text="errors.customerImpact" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- Results -->
    <div x-show="incidentCostResults" class="mt-6 p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
      <h4 class="font-semibold text-primary-900 dark:text-primary-100 mb-3">Incident Cost Breakdown</h4>
      <div class="space-y-2 text-sm">
        <div class="flex justify-between">
          <span>Revenue loss:</span>
          <span class="font-medium text-red-600 dark:text-red-400" x-text="incidentCostResults?.revenueLoss"></span>
        </div>
        <div class="flex justify-between">
          <span>Response team cost:</span>
          <span class="font-medium" x-text="incidentCostResults?.teamCost"></span>
        </div>
        <div class="flex justify-between">
          <span>Customer impact multiplier:</span>
          <span class="font-medium" x-text="incidentCostResults?.impactMultiplier"></span>
        </div>
        <div class="border-t pt-2 mt-2">
          <div class="flex justify-between font-semibold">
            <span>Total estimated cost:</span>
            <span class="text-red-600 dark:text-red-400" x-text="incidentCostResults?.totalCost"></span>
          </div>
        </div>
        <div class="mt-3">
          <div class="text-xs text-primary-600 dark:text-primary-400">
            <strong>Note:</strong> This excludes long-term reputation damage, customer churn, and regulatory costs.
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { calculateIncidentCost } from '../../utils/calculators/incidentCost';

  function incidentCostCalculator() {
    return {
      incidentDuration: '',
      revenuePerHour: '',
      peopleInvolved: '',
      avgHourlyRate: '',
      customerImpact: '',
      incidentCostResults: null,
      errors: {},

      validateNumber(value, field, opts = {}) {
        const { min = 0, max } = opts;
        if (value === '' || value === null) {
          this.errors[field] = '';
          return null;
        }
        const num = parseFloat(value);
        if (!Number.isFinite(num) || num < min) {
          this.errors[field] = min > 0 ? `Please enter a number â‰¥ ${min}` : 'Please enter a valid non-negative number';
          return null;
        }
        if (max !== undefined && num > max) {
          this.errors[field] = `Value cannot exceed ${max}`;
          return null;
        }
        this.errors[field] = '';
        return num;
      },

      calculate() {
        const duration = this.validateNumber(this.incidentDuration, 'incidentDuration');
        const revenue = this.validateNumber(this.revenuePerHour, 'revenuePerHour');
        const people = this.validateNumber(this.peopleInvolved, 'peopleInvolved', { min: 1 });
        const rate = this.validateNumber(this.avgHourlyRate, 'avgHourlyRate');
        const impactVal = this.customerImpact ? parseInt(this.customerImpact) : null;
        if (!impactVal) {
          this.errors.customerImpact = 'Please select an impact level';
        } else {
          this.errors.customerImpact = '';
        }

        if ([duration, revenue, people, rate, impactVal].some(v => v === null) || this.errors.customerImpact) {
          this.incidentCostResults = null;
          return;
        }

        const result = calculateIncidentCost(duration, revenue, people, rate, impactVal);
        this.incidentCostResults = {
          revenueLoss: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(result.revenueLoss),
          teamCost: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(result.teamCost),
          impactMultiplier: result.impactMultiplier + 'x',
          totalCost: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(result.totalCost)
        };
      }
    };
  }
</script>
