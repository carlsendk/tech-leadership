<div
  class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6"
  x-data="techDebtCalculator()"
>
  <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-4">
    Technical Debt Calculator
  </h3>
  <p class="text-sm text-primary-600 dark:text-primary-300 mb-6">
    Estimate the cost impact of technical debt on your development velocity.
  </p>

  <div class="space-y-4">
    <!-- Team Size -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Team size (developers)
      </label>
      <input
        type="number"
        x-model="teamSize"
        @input="calculate()"
        min="1"
        step="1"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        placeholder="e.g., 8"
      />
      <p x-show="errors.teamSize" x-text="errors.teamSize" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- Average Salary -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Average developer salary (annual)
      </label>
      <input
        type="number"
        x-model="avgSalary"
        @input="calculate()"
        min="0"
        step="1000"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        placeholder="e.g., 100000"
      />
      <p x-show="errors.avgSalary" x-text="errors.avgSalary" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- Tech Debt Tax -->
    <div>
      <label class="block text-sm font-medium text-primary-900 dark:text-primary-100 mb-2">
        Technical debt tax (% of time spent on debt)
      </label>
      <input
        type="number"
        x-model="techDebtTax"
        @input="calculate()"
        min="0"
        max="100"
        step="5"
        class="w-full p-2 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100"
        placeholder="e.g., 30"
      />
      <p x-show="errors.techDebtTax" x-text="errors.techDebtTax" class="text-red-600 text-xs mt-1"></p>
    </div>

    <!-- Results -->
    <div x-show="techDebtResults" class="mt-6 p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
      <h4 class="font-semibold text-primary-900 dark:text-primary-100 mb-3">Annual Cost Impact</h4>
      <div class="space-y-2 text-sm">
        <div class="flex justify-between">
          <span>Annual cost of technical debt:</span>
          <span class="font-medium text-red-600 dark:text-red-400" x-text="techDebtResults?.annualCost"></span>
        </div>
        <div class="flex justify-between">
          <span>Lost velocity (hours/year):</span>
          <span class="font-medium" x-text="techDebtResults?.lostHours"></span>
        </div>
        <div class="flex justify-between">
          <span>Equivalent developer time:</span>
          <span class="font-medium" x-text="techDebtResults?.equivalentDevs"></span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { calculateTechDebt } from '../../utils/calculators/techDebt';

  function techDebtCalculator() {
    return {
      teamSize: '',
      avgSalary: '',
      techDebtTax: '',
      techDebtResults: null,
      errors: {},

      validateNumber(value, field, opts = {}) {
        const { min = 0, max } = opts;
        if (value === '' || value === null) {
          this.errors[field] = '';
          return null;
        }
        const num = parseFloat(value);
        if (!Number.isFinite(num) || num < min) {
          this.errors[field] = min > 0 ? `Please enter a number â‰¥ ${min}` : 'Please enter a valid non-negative number';
          return null;
        }
        if (max !== undefined && num > max) {
          this.errors[field] = 'Percentage cannot exceed 100';
          return null;
        }
        this.errors[field] = '';
        return num;
      },

      calculate() {
        const size = this.validateNumber(this.teamSize, 'teamSize', { min: 1 });
        const salary = this.validateNumber(this.avgSalary, 'avgSalary');
        const tax = this.validateNumber(this.techDebtTax, 'techDebtTax', { max: 100 });

        if ([size, salary, tax].some(v => v === null)) {
          this.techDebtResults = null;
          return;
        }

        const result = calculateTechDebt(size, salary, tax);
        this.techDebtResults = {
          annualCost: new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: 0
          }).format(result.annualCost),
          lostHours: Math.round(result.lostHours).toLocaleString(),
          equivalentDevs: result.equivalentDevs.toFixed(1) + ' FTE'
        };
      }
    };
  }
</script>
