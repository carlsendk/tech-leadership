---
// Direct Questionnaire Assessment - No selection cards, straight to assessment
export interface Props {
  assessmentId: string;
}

const { assessmentId } = Astro.props;
---

<div 
  id="direct-questionnaire"
  x-data="directQuestionnaireAssessment()"
  x-init="loadAssessment()"
>
  <!-- Loading State -->
  <div x-show="isLoading" class="flex items-center justify-center p-8">
    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
    <span class="ml-3 text-primary-600 dark:text-primary-400">Loading assessment...</span>
  </div>

  <!-- Assessment Content -->
  <div x-show="!isLoading && currentAssessment && !showResults">
    <div class="max-w-4xl mx-auto">
      <!-- Progress Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100" x-text="currentAssessment?.title"></h2>
          <a href="/tech-leadership/assessments/" class="text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors">
            ← Back to Assessments
          </a>
        </div>
        
        <!-- Progress Bar -->
        <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
          <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" :style="`width: ${getProgress()}%`"></div>
        </div>
        <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
          <span x-text="`Section ${currentSectionIndex + 1} of ${currentAssessment?.sections?.length || 0}`"></span>
          <span x-text="`${getProgress()}% complete`"></span>
        </div>
      </div>

      <!-- Current Section -->
      <div x-show="getCurrentSection()" class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-8">
        <div class="mb-6">
          <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="getCurrentSection()?.title"></h3>
          <p class="text-primary-600 dark:text-primary-300" x-text="getCurrentSection()?.description"></p>
        </div>

        <!-- Questions -->
        <div class="space-y-6">
          <template x-for="question in getCurrentSection()?.questions || []" :key="question.id">
            <div class="border-b border-primary-200 dark:border-primary-600 pb-6 last:border-b-0">
              <div class="mb-4">
                <label class="block text-lg font-medium text-primary-900 dark:text-primary-100 mb-2" x-text="question.text"></label>
                <p x-show="question.helpText" class="text-sm text-primary-500 dark:text-primary-400" x-text="question.helpText"></p>
              </div>
              
              <!-- Scale Question -->
              <div x-show="question.type === 'scale'" class="space-y-4">
                <div class="flex justify-between text-sm text-primary-600 dark:text-primary-300 mb-3">
                  <span class="font-medium" x-text="question.labels?.[0] || ''"></span>
                  <span class="font-medium" x-text="question.labels?.[question.labels.length - 1] || ''"></span>
                </div>
                <div class="grid grid-cols-5 gap-4 max-w-lg mx-auto">
                  <template x-for="value in Array.from({length: question.max - question.min + 1}, (_, i) => i + question.min)" :key="value">
                    <label class="flex flex-col items-center cursor-pointer group">
                      <input 
                        type="radio" 
                        :name="question.id"
                        :value="value"
                        @change="updateResponse(question.id, value)"
                        :checked="responses[question.id] == value"
                        class="sr-only"
                      />
                      <div 
                        class="w-14 h-14 rounded-full border-2 flex items-center justify-center transition-all duration-200 mb-2"
                        :class="responses[question.id] == value ? 'border-accent-600 bg-accent-600 text-white shadow-lg scale-105' : 'border-primary-300 dark:border-primary-600 group-hover:border-accent-400 group-hover:scale-105'"
                      >
                        <span class="text-sm font-semibold" x-text="value"></span>
                      </div>
                      <span class="text-xs text-center text-primary-500 dark:text-primary-400 leading-tight max-w-20 h-8 flex items-center justify-center" x-text="question.labels?.[value - question.min] || ''"></span>
                    </label>
                  </template>
                </div>
              </div>
            </div>
          </template>
        </div>

        <!-- Navigation -->
        <div class="flex justify-between mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
          <button 
            x-show="currentSectionIndex > 0"
            @click="previousSection()"
            class="flex items-center px-4 py-2 text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-200 transition-colors"
          >
            ← Previous Section
          </button>
          <div x-show="currentSectionIndex === 0"></div>
          
          <button 
            x-show="currentSectionIndex < (currentAssessment?.sections?.length || 0) - 1"
            @click="nextSection()"
            :disabled="!isSectionComplete()"
            class="flex items-center px-6 py-2 bg-accent-600 hover:bg-accent-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors"
          >
            Next Section →
          </button>
          
          <button 
            x-show="currentSectionIndex === (currentAssessment?.sections?.length || 0) - 1"
            @click="completeAssessment()"
            :disabled="!isSectionComplete()"
            class="flex items-center px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors"
          >
            Complete Assessment
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Results Display -->
  <div x-show="showResults && assessmentResult" class="max-w-4xl mx-auto">
    <div class="text-center p-8">
      <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Complete!</h1>
      <p class="text-primary-600 dark:text-primary-400 mb-6">Thank you for completing the assessment.</p>
      <div class="space-x-4">
        <button @click="downloadResults()" class="px-6 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-md transition-colors">
          Download Results
        </button>
        <a href="/tech-leadership/assessments/" class="px-6 py-2 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors">
          Back to Assessments
        </a>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function directQuestionnaireAssessment() {
    return {
      isLoading: true,
      currentAssessment: null,
      currentSectionIndex: 0,
      responses: {},
      showResults: false,
      assessmentResult: null,
      startTime: null,

      async loadAssessment() {
        try {
          this.isLoading = true;
          const assessmentId = '{assessmentId}';
          const response = await fetch(`/tech-leadership/assessments/${assessmentId}.json/`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          this.currentAssessment = await response.json();
          this.currentSectionIndex = 0;
          this.responses = {};
          this.startTime = new Date();
          this.showResults = false;
          
        } catch (error) {
          console.error('Failed to load assessment:', error);
          alert(`Failed to load assessment: ${error.message}`);
        } finally {
          this.isLoading = false;
        }
      },

      getCurrentSection() {
        return this.currentAssessment?.sections?.[this.currentSectionIndex] || null;
      },

      getProgress() {
        if (!this.currentAssessment?.sections) return 0;
        return Math.round(((this.currentSectionIndex + 1) / this.currentAssessment.sections.length) * 100);
      },

      updateResponse(questionId, value) {
        this.responses[questionId] = value;
      },

      isSectionComplete() {
        const currentSection = this.getCurrentSection();
        if (!currentSection) return false;
        
        const requiredQuestions = currentSection.questions.filter(q => q.required);
        return requiredQuestions.every(q => this.responses[q.id] !== undefined && this.responses[q.id] !== '');
      },

      nextSection() {
        if (this.isSectionComplete() && this.currentSectionIndex < (this.currentAssessment?.sections?.length || 0) - 1) {
          this.currentSectionIndex++;
        }
      },

      previousSection() {
        if (this.currentSectionIndex > 0) {
          this.currentSectionIndex--;
        }
      },

      completeAssessment() {
        if (!this.isSectionComplete()) return;
        
        this.showResults = true;
        this.assessmentResult = {
          id: 'result-' + Date.now(),
          assessmentId: this.currentAssessment.id,
          assessmentTitle: this.currentAssessment.title,
          type: 'questionnaire',
          responses: this.responses,
          completedAt: new Date(),
          timeSpent: this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0
        };
      },

      downloadResults() {
        if (!this.assessmentResult) return;
        
        const content = JSON.stringify(this.assessmentResult, null, 2);
        const blob = new Blob([content], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `questionnaire-assessment-${this.assessmentResult.assessmentId}-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    };
  }

  // Make function globally available
  window.directQuestionnaireAssessment = directQuestionnaireAssessment;
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>