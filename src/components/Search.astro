---
import { getCollection } from "astro:content";
import { getBlogUrl, getWikiUrl } from "../utils/url";
import fs from "fs";
import path from "path";

interface ContentEntry {
  data: {
    draft?: boolean;
    title: string;
    description: string;
    category: string;
    tags: string[];
  };
  slug: string;
}

interface SearchItem {
  title: string;
  description: string;
  url: string;
  type: "blog" | "wiki";
  category: string;
  tags: string[];
}

// Get all blog posts and wiki entries
const blogPosts = await getCollection(
  "blog",
  ({ data }: { data: ContentEntry["data"] }) => !data.draft,
);
const wikiEntries = await getCollection(
  "wiki",
  ({ data }: { data: ContentEntry["data"] }) => !data.draft,
);

// Prepare search data
const searchData: SearchItem[] = [
  ...blogPosts.map((post: ContentEntry) => ({
    title: post.data.title,
    description: post.data.description,
    url: getBlogUrl(post.slug),
    type: "blog" as const,
    category: post.data.category,
    tags: post.data.tags,
  })),
  ...wikiEntries.map((entry: ContentEntry) => ({
    title: entry.data.title,
    description: entry.data.description,
    url: getWikiUrl(entry.slug),
    type: "wiki" as const,
    category: entry.data.category,
    tags: entry.data.tags,
  })),
];

const searchDropdownHtml = fs.readFileSync(
  "./src/components/SearchDropdown.html",
  "utf-8",
);
---

<script is:inline define:vars={{ searchData }}>
  window.searchData = searchData;
</script>

<div
  class="relative"
  x-data="{ 
    open: false, 
    search: '', 
    results: [],
    selectedIndex: -1,
    init() {
      this.$watch('search', value => {
        if (!value.trim()) {
          this.results = [];
          return;
        }
        
        const searchTerm = value.toLowerCase();
        this.results = window.searchData.filter(item => 
          item.title.toLowerCase().includes(searchTerm) ||
          item.description.toLowerCase().includes(searchTerm) ||
          item.category.toLowerCase().includes(searchTerm) ||
          item.tags.some(tag => tag.toLowerCase().includes(searchTerm))
        ).slice(0, 8);
      });

      // Keyboard navigation
      window.addEventListener('keydown', (e) => {
        if (!this.open) return;
        
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          this.selectedIndex = Math.min(this.selectedIndex + 1, this.results.length - 1);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          this.selectedIndex = Math.max(this.selectedIndex - 1, -1);
        } else if (e.key === 'Enter' && this.selectedIndex >= 0) {
          e.preventDefault();
          window.location.href = this.results[this.selectedIndex].url;
        } else if (e.key === 'Escape') {
          this.open = false;
          this.search = '';
        }
      });
    }
  }"
>
  <!-- Search input -->
  <div class="relative">
    <input
      type="search"
      x-model="search"
      @focus="open = true"
      @click.away="open = false"
      placeholder="Search..."
      class="w-full md:w-64 pl-10 pr-4 py-2 text-sm bg-primary-100 dark:bg-primary-800 text-primary-900 dark:text-primary-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-accent-500"
    />
    <div
      class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
    >
      <svg
        class="h-5 w-5 text-primary-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
    </div>
  </div>

  <!-- Search results -->
  <div set:html={searchDropdownHtml} />
</div>
