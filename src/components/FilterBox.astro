---
import { getTagUrl, getCategoryUrl, getFullUrl } from "../utils/url";

export interface Props {
  title?: string;
  categories?: string[];
  activeCategory?: string | null;
  tags?: string[];
  activeTag?: string | null;
  baseUrl: string;
}

const {
  title = "Browse Content",
  categories = [],
  activeCategory,
  tags = [],
  activeTag,
  baseUrl,
} = Astro.props;

// Helper function to build URLs consistently
const buildUrl = (base: string, params: Record<string, string>) => {
  // For tag pages, use tag URL utility
  if (params.tag) {
    return getTagUrl(params.tag);
  }

  // For category pages, use category URL utility
  if (params.category) {
    return getCategoryUrl(params.category);
  }

  // For base URLs, ensure proper base path
  return getFullUrl(base.replace(/^\/+/, ""));
};
---

<div
  class="bg-white dark:bg-primary-900 rounded-xl p-6 space-y-6 border border-primary-200 dark:border-primary-800"
>
  {
    categories.length > 0 && (
      <div>
        <h2 class="text-lg font-semibold text-primary-900 dark:text-white mb-4">
          {title}
        </h2>

        <div class="flex flex-wrap gap-2">
          <a
            href={buildUrl(baseUrl, {})}
            class={`inline-flex items-center text-sm px-4 py-2 rounded-lg transition-colors ${
              !activeCategory
                ? "bg-accent-600 text-white hover:bg-accent-700"
                : "bg-primary-100 dark:bg-primary-800 text-primary-700 dark:text-primary-300 hover:bg-primary-200 dark:hover:bg-primary-700"
            }`}
          >
            All
          </a>
          {categories.map((category) => {
            const isActive = category === activeCategory;
            const href = buildUrl(baseUrl, { category });

            return (
              <a
                href={href}
                class={`inline-flex items-center text-sm px-4 py-2 rounded-lg transition-colors ${
                  isActive
                    ? "bg-accent-600 text-white hover:bg-accent-700"
                    : "bg-primary-100 dark:bg-primary-800 text-primary-700 dark:text-primary-300 hover:bg-primary-200 dark:hover:bg-primary-700"
                }`}
              >
                {category}
              </a>
            );
          })}
        </div>
      </div>
    )
  }

  {
    tags.length > 0 && (
      <div x-data="{ showAllTags: false }">
        <div class="flex items-center justify-between mb-3">
          <h3 class="text-sm font-medium text-primary-900 dark:text-white">
            Popular Tags
          </h3>
          {tags.length > 12 && (
            <button
              @click="showAllTags = !showAllTags"
              class="text-xs text-accent-600 dark:text-accent-400 hover:text-accent-700 dark:hover:text-accent-300 transition-colors"
            >
              <span x-text="showAllTags ? 'Show less' : `Show all (${tags.length})`"></span>
            </button>
          )}
        </div>
        <div class="flex flex-wrap gap-2">
          {tags.map((tag, index) => {
            const isActive = tag === activeTag;
            const href = buildUrl(baseUrl, { tag });
            const isInitialTag = index < 12;

            return (
              <a
                href={href}
                class={`inline-flex items-center text-sm px-3 py-1.5 rounded-full transition-colors ${
                  isActive
                    ? "bg-accent-600 text-white hover:bg-accent-700"
                    : "bg-primary-100 dark:bg-primary-800 text-primary-700 dark:text-primary-300 hover:bg-primary-200 dark:hover:bg-primary-700"
                }`}
                x-show={isInitialTag ? "true" : "showAllTags"}
                x-transition
              >
                #{tag}
              </a>
            );
          })}
        </div>
      </div>
    )
  }
</div>
