---
// Assessment Engine - Client-side assessment functionality
---

<div 
  id="assessment-engine"
  x-data="assessmentEngine()"
  x-init="initializeEngine()"
>
  <!-- Assessment Loading State -->
  <div x-show="isLoading" class="flex items-center justify-center p-8">
    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
    <span class="ml-3 text-primary-600 dark:text-primary-400">Loading assessment...</span>
  </div>

  <!-- Assessment Selection -->
  <div x-show="!isLoading && !currentAssessment && !showResults" class="space-y-6">
    <div class="text-center">
      <h2 class="text-3xl font-bold text-primary-900 dark:text-primary-100 mb-4">
        Available Assessments
      </h2>
      <p class="text-lg text-primary-600 dark:text-primary-400 max-w-2xl mx-auto">
        Take a comprehensive assessment to evaluate your organization's maturity and receive personalized recommendations.
      </p>
    </div>

    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      <template x-for="assessment in availableAssessments" :key="assessment.id">
        <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md hover:shadow-lg transition-shadow p-6">
          <div class="flex items-start justify-between mb-4">
            <div class="flex-1">
              <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="assessment.title"></h3>
              <p class="text-primary-600 dark:text-primary-300 text-sm mb-3" x-text="assessment.description"></p>
            </div>
          </div>
          
          <div class="flex items-center justify-between text-sm text-primary-500 dark:text-primary-400 mb-4">
            <span x-text="`⏱️ ${assessment.estimatedTime} minutes`"></span>
            <span x-text="assessment.category" class="bg-primary-100 dark:bg-primary-700 px-2 py-1 rounded"></span>
          </div>
          
          <div class="flex items-center justify-between">
            <button 
              @click="startAssessment(assessment.id)"
              class="bg-accent-600 hover:bg-accent-700 text-white px-4 py-2 rounded-md transition-colors"
            >
              Start Assessment
            </button>
            
            <!-- Resume option if in progress -->
            <button 
              x-show="hasInProgressAssessment(assessment.id)"
              @click="resumeAssessment(assessment.id)"
              class="text-accent-600 hover:text-accent-700 text-sm transition-colors"
            >
              Resume →
            </button>
          </div>
        </div>
      </template>
    </div>
  </div>

  <!-- Assessment Progress -->
  <div x-show="currentAssessment && !showResults" class="max-w-4xl mx-auto">
    <!-- Progress Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100" x-text="currentAssessment?.title"></h2>
        <button 
          @click="saveAndExit()"
          class="text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors"
        >
          Save & Exit
        </button>
      </div>
      
      <!-- Progress Bar -->
      <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
        <div 
          class="bg-accent-600 h-2 rounded-full transition-all duration-300"
          :style="`width: ${progressPercentage}%`"
        ></div>
      </div>
      <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
        <span x-text="`Section ${currentSectionIndex + 1} of ${currentAssessment?.sections.length || 0}`"></span>
        <span x-text="`${progressPercentage}% complete`"></span>
      </div>
    </div>

    <!-- Current Section -->
    <div x-show="currentSection" class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-8">
      <div class="mb-6">
        <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="currentSection?.title"></h3>
        <p class="text-primary-600 dark:text-primary-300" x-text="currentSection?.description"></p>
      </div>

      <!-- Questions -->
      <div class="space-y-6">
        <template x-for="(question, qIndex) in currentSection?.questions || []" :key="question.id">
          <div class="border-b border-primary-200 dark:border-primary-600 pb-6 last:border-b-0">
            <div class="mb-4">
              <label class="block text-lg font-medium text-primary-900 dark:text-primary-100 mb-2" x-text="question.text"></label>
              <p x-show="question.helpText" class="text-sm text-primary-500 dark:text-primary-400" x-text="question.helpText"></p>
            </div>

            <!-- Scale Questions -->
            <div x-show="question.type === 'scale'" class="space-y-4">
              <div class="flex justify-between text-sm text-primary-600 dark:text-primary-300 mb-3">
                <span x-text="question.labels?.[0]" class="font-medium"></span>
                <span x-text="question.labels?.[question.labels.length - 1]" class="font-medium"></span>
              </div>
              <!-- Desktop/Tablet Layout -->
              <div class="hidden sm:block">
                <div class="grid grid-cols-5 gap-4 max-w-lg mx-auto">
                  <template x-for="value in Array.from({length: question.max - question.min + 1}, (_, i) => i + question.min)" :key="value">
                    <label class="flex flex-col items-center cursor-pointer group">
                      <input 
                        type="radio" 
                        :name="question.id"
                        :value="value"
                        @change="updateResponse(question.id, value)"
                        :checked="getResponse(question.id) == value"
                        class="sr-only"
                      />
                      <div 
                        class="w-14 h-14 rounded-full border-2 flex items-center justify-center transition-all duration-200 mb-2"
                        :class="getResponse(question.id) == value ? 'border-accent-600 bg-accent-600 text-white shadow-lg scale-105' : 'border-primary-300 dark:border-primary-600 group-hover:border-accent-400 group-hover:scale-105'"
                      >
                        <span class="text-sm font-semibold" x-text="value"></span>
                      </div>
                      <span class="text-xs text-center text-primary-500 dark:text-primary-400 leading-tight max-w-20 h-8 flex items-center justify-center" x-text="question.labels?.[value - question.min]"></span>
                    </label>
                  </template>
                </div>
              </div>
              <!-- Mobile Layout -->
              <div class="sm:hidden space-y-3">
                <template x-for="value in Array.from({length: question.max - question.min + 1}, (_, i) => i + question.min)" :key="value">
                  <label class="flex items-center p-3 border rounded-lg cursor-pointer transition-colors" :class="getResponse(question.id) == value ? 'border-accent-600 bg-accent-50 dark:bg-accent-900/20' : 'border-primary-200 dark:border-primary-600 hover:border-accent-300'">
                    <input 
                      type="radio" 
                      :name="question.id"
                      :value="value"
                      @change="updateResponse(question.id, value)"
                      :checked="getResponse(question.id) == value"
                      class="sr-only"
                    />
                    <div 
                      class="w-8 h-8 rounded-full border-2 flex items-center justify-center mr-3 flex-shrink-0"
                      :class="getResponse(question.id) == value ? 'border-accent-600 bg-accent-600 text-white' : 'border-primary-300 dark:border-primary-500'"
                    >
                      <span class="text-sm font-medium" x-text="value"></span>
                    </div>
                    <div class="flex-1">
                      <span class="text-sm text-primary-900 dark:text-primary-100" x-text="question.labels?.[value - question.min]"></span>
                    </div>
                  </label>
                </template>
              </div>
            </div>

            <!-- Multiple Choice Questions -->
            <div x-show="question.type === 'multiple-choice'" class="space-y-2">
              <template x-for="(option, optIndex) in question.options || []" :key="optIndex">
                <label class="flex items-center cursor-pointer p-3 rounded-md hover:bg-primary-50 dark:hover:bg-primary-700 transition-colors">
                  <input 
                    type="radio" 
                    :name="question.id"
                    :value="option"
                    @change="updateResponse(question.id, option)"
                    :checked="getResponse(question.id) === option"
                    class="h-4 w-4 text-accent-600 border-primary-300 dark:border-primary-600"
                  />
                  <span class="ml-3 text-primary-900 dark:text-primary-100" x-text="option"></span>
                </label>
              </template>
            </div>

            <!-- Yes/No Questions -->
            <div x-show="question.type === 'yes-no'" class="flex space-x-6">
              <label class="flex items-center cursor-pointer">
                <input 
                  type="radio" 
                  :name="question.id"
                  value="yes"
                  @change="updateResponse(question.id, 'yes')"
                  :checked="getResponse(question.id) === 'yes'"
                  class="h-4 w-4 text-accent-600 border-primary-300 dark:border-primary-600"
                />
                <span class="ml-2 text-primary-900 dark:text-primary-100">Yes</span>
              </label>
              <label class="flex items-center cursor-pointer">
                <input 
                  type="radio" 
                  :name="question.id"
                  value="no"
                  @change="updateResponse(question.id, 'no')"
                  :checked="getResponse(question.id) === 'no'"
                  class="h-4 w-4 text-accent-600 border-primary-300 dark:border-primary-600"
                />
                <span class="ml-2 text-primary-900 dark:text-primary-100">No</span>
              </label>
            </div>

            <!-- Text Questions -->
            <div x-show="question.type === 'text'">
              <textarea 
                :name="question.id"
                :value="getResponse(question.id)"
                @input="updateResponse(question.id, $event.target.value)"
                rows="3"
                class="w-full p-3 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100 focus:ring-2 focus:ring-accent-500 focus:border-accent-500"
                placeholder="Enter your response..."
              ></textarea>
            </div>
          </div>
        </template>
      </div>

      <!-- Navigation -->
      <div class="flex justify-between mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
        <button 
          x-show="currentSectionIndex > 0"
          @click="previousSection()"
          class="flex items-center px-4 py-2 text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-200 transition-colors"
        >
          ← Previous Section
        </button>
        <div></div>
        
        <button 
          x-show="currentSectionIndex < (currentAssessment?.sections.length || 0) - 1"
          @click="nextSection()"
          :disabled="!isSectionComplete()"
          class="flex items-center px-6 py-2 bg-accent-600 hover:bg-accent-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors"
        >
          Next Section →
        </button>
        
        <button 
          x-show="currentSectionIndex === (currentAssessment?.sections.length || 0) - 1"
          @click="completeAssessment()"
          :disabled="!isSectionComplete()"
          class="flex items-center px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors"
        >
          Complete Assessment
        </button>
      </div>
    </div>
  </div>

  <!-- Results Display -->
  <div x-show="showResults && assessmentResult" class="container mx-auto px-4">
    <!-- Results Header -->
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Results</h1>
      <div class="max-w-2xl mx-auto">
        <h2 class="text-xl text-primary-600 dark:text-primary-400 mb-2" x-text="assessmentResult?.assessmentTitle"></h2>
        <p class="text-sm text-primary-500 dark:text-primary-400" x-text="`Completed on ${new Date(assessmentResult?.completedAt).toLocaleDateString()}`"></p>
      </div>
    </div>

    <!-- Overall Score and Chart -->
    <div class="grid gap-8 lg:grid-cols-3 mb-12">
      <!-- Overall Score -->
      <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
        <div class="text-center">
          <div class="text-5xl font-bold text-accent-600 mb-3" x-text="`${Math.round(assessmentResult?.overallPercentage || 0)}%`"></div>
          <div class="text-xl text-primary-900 dark:text-primary-100 mb-2">Overall Maturity Score</div>
          <div class="text-sm text-primary-600 dark:text-primary-300" x-text="`${assessmentResult?.totalScore || 0} out of ${assessmentResult?.totalMaxScore || 0} points`"></div>
        </div>
      </div>
      
      <!-- Radar Chart - Takes up 2 columns -->
      <div class="lg:col-span-2 bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
        <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-4 text-center">
          Maturity Profile
        </h3>
        <div class="flex justify-center">
          <canvas id="maturityRadarChart" width="500" height="400" class="max-w-full"></canvas>
        </div>
      </div>
    </div>

    <!-- Section Scores -->
    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
      <template x-for="sectionScore in assessmentResult?.sectionScores || []" :key="sectionScore.sectionId">
        <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
          <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-3" x-text="getSectionTitle(sectionScore.sectionId)"></h3>
          <div class="flex items-center justify-between mb-2">
            <span class="text-2xl font-bold text-accent-600" x-text="`${Math.round(sectionScore.percentage)}%`"></span>
            <span class="text-sm text-primary-500 dark:text-primary-400" x-text="`${sectionScore.score}/${sectionScore.maxScore}`"></span>
          </div>
          <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2">
            <div 
              class="bg-accent-600 h-2 rounded-full"
              :style="`width: ${sectionScore.percentage}%`"
            ></div>
          </div>
        </div>
      </template>
    </div>

    <!-- Recommendations -->
    <div class="space-y-6 mb-8">
      <h3 class="text-2xl font-bold text-primary-900 dark:text-primary-100">Recommendations</h3>
      <template x-for="recommendation in assessmentResult?.recommendations || []" :key="recommendation.title">
        <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
          <div class="flex items-start justify-between mb-4">
            <h4 class="text-xl font-semibold text-primary-900 dark:text-primary-100" x-text="recommendation.title"></h4>
            <span 
              class="px-3 py-1 rounded-full text-sm font-medium"
              :class="{
                'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200': recommendation.priority === 'high',
                'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200': recommendation.priority === 'medium',
                'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200': recommendation.priority === 'low'
              }"
              x-text="recommendation.priority + ' priority'"
            ></span>
          </div>
          <p class="text-primary-600 dark:text-primary-300 mb-4" x-text="recommendation.description"></p>
          
          <div class="grid gap-4 md:grid-cols-2">
            <div>
              <h5 class="font-medium text-primary-900 dark:text-primary-100 mb-2">Action Items:</h5>
              <ul class="list-disc list-inside space-y-1 text-sm text-primary-600 dark:text-primary-300">
                <template x-for="item in recommendation.items" :key="item">
                  <li x-text="item"></li>
                </template>
              </ul>
            </div>
            <div>
              <h5 class="font-medium text-primary-900 dark:text-primary-100 mb-2">Next Steps:</h5>
              <div class="space-y-1">
                <template x-for="step in recommendation.nextSteps" :key="step">
                  <a :href="step" target="_blank" rel="noopener noreferrer" class="block text-sm text-accent-600 hover:text-accent-700 dark:text-accent-400 dark:hover:text-accent-300 transition-colors">
                    → <span x-text="getLinkText(step)"></span> <span class="text-xs opacity-70">↗</span>
                  </a>
                </template>
              </div>
            </div>
          </div>
        </div>
      </template>
    </div>

    <!-- Actions -->
    <div class="flex flex-wrap gap-4 justify-center">
      <button 
        @click="downloadResults('json')"
        class="px-6 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-md transition-colors"
      >
        Download JSON
      </button>
      <button 
        @click="downloadResults('pdf')"
        class="px-6 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors"
      >
        Download PDF
      </button>
      <button 
        @click="startNewAssessment()"
        class="px-6 py-2 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors"
      >
        Take Another Assessment
      </button>
    </div>
  </div>
</div>

<script is:inline>
  function assessmentEngine() {
    return {
      isLoading: true,
      availableAssessments: [],
      currentAssessment: null,
      currentSectionIndex: 0,
      responses: new Map(),
      assessmentResult: null,
      showResults: false,
      startTime: null,

      get currentSection() {
        return this.currentAssessment?.sections[this.currentSectionIndex] || null;
      },

      get progressPercentage() {
        if (!this.currentAssessment) return 0;
        return Math.round(((this.currentSectionIndex + 1) / this.currentAssessment.sections.length) * 100);
      },

      async initializeEngine() {
        try {
          this.isLoading = true;
          
          // Load available assessments
          const response = await fetch('/tech-leadership/assessments/index.json');
          this.availableAssessments = await response.json();
          
          // Check for any in-progress assessments
          this.loadInProgressAssessments();
          
        } catch (error) {
          console.error('Failed to initialize assessment engine:', error);
        } finally {
          this.isLoading = false;
        }
      },

      async startAssessment(assessmentId) {
        try {
          this.isLoading = true;
          
          // Load the full assessment
          const response = await fetch(`/tech-leadership/assessments/${assessmentId}.json/`);
          this.currentAssessment = await response.json();
          
          // Initialize assessment state
          this.currentSectionIndex = 0;
          this.responses = new Map();
          this.showResults = false;
          this.startTime = new Date();
          
        } catch (error) {
          console.error('Failed to start assessment:', error);
        } finally {
          this.isLoading = false;
        }
      },

      async resumeAssessment(assessmentId) {
        const progress = this.getInProgressAssessment(assessmentId);
        if (progress) {
          await this.startAssessment(assessmentId);
          this.currentSectionIndex = progress.currentSectionIndex;
          this.responses = new Map(progress.responses.map(r => [r.questionId, r.value]));
          this.startTime = new Date(progress.startedAt);
        }
      },

      updateResponse(questionId, value) {
        this.responses.set(questionId, value);
        this.saveProgress();
      },

      getResponse(questionId) {
        return this.responses.get(questionId) || '';
      },

      isSectionComplete() {
        if (!this.currentSection) return false;
        
        const requiredQuestions = this.currentSection.questions.filter(q => q.required);
        return requiredQuestions.every(q => this.responses.has(q.id) && this.responses.get(q.id) !== '');
      },

      nextSection() {
        if (this.isSectionComplete() && this.currentSectionIndex < (this.currentAssessment?.sections.length || 0) - 1) {
          this.currentSectionIndex++;
          this.saveProgress();
          this.scrollToTop();
        }
      },

      previousSection() {
        if (this.currentSectionIndex > 0) {
          this.currentSectionIndex--;
          this.scrollToTop();
        }
      },

      completeAssessment() {
        if (!this.isSectionComplete()) return;
        
        const result = this.calculateResults();
        this.assessmentResult = result;
        this.showResults = true;
        
        // Save final result
        this.saveAssessmentResult(result);
        
        // Clear progress since it's complete
        this.clearProgress();
        
        // Create radar chart after a brief delay to ensure DOM is ready
        setTimeout(() => this.createRadarChart(), 100);
      },

      calculateResults() {
        const responses = Array.from(this.responses.entries()).map(([questionId, value]) => {
          const section = this.currentAssessment.sections.find(s => 
            s.questions.some(q => q.id === questionId)
          );
          return {
            questionId,
            sectionId: section?.id || '',
            value,
            timestamp: new Date()
          };
        });

        // Calculate section scores
        const sectionScores = this.currentAssessment.sections.map(section => {
          const sectionQuestions = section.questions.filter(q => q.type === 'scale');
          const sectionResponses = responses.filter(r => r.sectionId === section.id);
          
          const score = sectionResponses.reduce((sum, response) => {
            const question = sectionQuestions.find(q => q.id === response.questionId);
            return sum + (question?.type === 'scale' ? Number(response.value) || 0 : 0);
          }, 0);
          
          const maxScore = sectionQuestions.reduce((sum, q) => sum + (q.max || 0), 0);
          
          return {
            sectionId: section.id,
            score,
            maxScore,
            percentage: maxScore > 0 ? (score / maxScore) * 100 : 0
          };
        });

        // Calculate overall score
        const totalScore = sectionScores.reduce((sum, s) => sum + s.score, 0);
        const totalMaxScore = sectionScores.reduce((sum, s) => sum + s.maxScore, 0);
        const overallPercentage = totalMaxScore > 0 ? (totalScore / totalMaxScore) * 100 : 0;

        // Find applicable recommendations
        const recommendations = this.currentAssessment.scoring.recommendations.filter(rec => {
          const [min, max] = rec.scoreRange;
          return totalScore >= min && totalScore <= max;
        });

        const timeSpent = this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0;

        return {
          id: this.generateResultId(),
          assessmentId: this.currentAssessment.id,
          assessmentTitle: this.currentAssessment.title,
          responses,
          sectionScores,
          totalScore,
          totalMaxScore,
          overallPercentage,
          recommendations,
          completedAt: new Date(),
          timeSpent
        };
      },

      getSectionTitle(sectionId) {
        return this.currentAssessment?.sections.find(s => s.id === sectionId)?.title || sectionId;
      },

      getLinkText(url) {
        // Convert URL path to readable text
        const pathParts = url.split('/').filter(part => part && part !== 'tech-leadership');
        if (pathParts.length === 0) return 'Home';
        
        const lastPart = pathParts[pathParts.length - 1];
        
        // Convert kebab-case to title case
        return lastPart.split('-')
          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ');
      },

      saveProgress() {
        if (!this.currentAssessment) return;
        
        const progress = {
          assessmentId: this.currentAssessment.id,
          currentSectionIndex: this.currentSectionIndex,
          responses: Array.from(this.responses.entries()).map(([questionId, value]) => ({
            questionId,
            sectionId: this.currentAssessment.sections.find(s => 
              s.questions.some(q => q.id === questionId)
            )?.id || '',
            value,
            timestamp: new Date()
          })),
          startedAt: this.startTime,
          lastSavedAt: new Date()
        };
        
        localStorage.setItem(`assessment-progress-${this.currentAssessment.id}`, JSON.stringify(progress));
      },

      loadInProgressAssessments() {
        // Implementation for loading in-progress assessments
      },

      hasInProgressAssessment(assessmentId) {
        return localStorage.getItem(`assessment-progress-${assessmentId}`) !== null;
      },

      getInProgressAssessment(assessmentId) {
        const progress = localStorage.getItem(`assessment-progress-${assessmentId}`);
        return progress ? JSON.parse(progress) : null;
      },

      clearProgress() {
        if (this.currentAssessment) {
          localStorage.removeItem(`assessment-progress-${this.currentAssessment.id}`);
        }
      },

      saveAssessmentResult(result) {
        const results = JSON.parse(localStorage.getItem('assessment-results') || '[]');
        results.unshift(result);
        
        // Keep only last 50 results
        localStorage.setItem('assessment-results', JSON.stringify(results.slice(0, 50)));
      },

      saveAndExit() {
        this.saveProgress();
        this.currentAssessment = null;
        this.showResults = false;
      },

      startNewAssessment() {
        this.currentAssessment = null;
        this.showResults = false;
        this.assessmentResult = null;
      },

      downloadResults(format) {
        if (!this.assessmentResult) return;
        
        let content, mimeType, filename;
        
        if (format === 'json') {
          content = JSON.stringify(this.assessmentResult, null, 2);
          mimeType = 'application/json';
          filename = `assessment-${this.assessmentResult.assessmentId}-${new Date().toISOString().split('T')[0]}.json`;
        } else if (format === 'pdf') {
          // For now, create a simple text version - could integrate with jsPDF later
          content = this.generateTextReport();
          mimeType = 'text/plain';
          filename = `assessment-${this.assessmentResult.assessmentId}-${new Date().toISOString().split('T')[0]}.txt`;
        }
        
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      },

      generateTextReport() {
        const result = this.assessmentResult;
        let report = `${result.assessmentTitle}\n`;
        report += `Completed: ${new Date(result.completedAt).toLocaleDateString()}\n`;
        report += `Overall Score: ${Math.round(result.overallPercentage)}% (${result.totalScore}/${result.totalMaxScore})\n\n`;
        
        report += 'Section Scores:\n';
        result.sectionScores.forEach(section => {
          report += `- ${this.getSectionTitle(section.sectionId)}: ${Math.round(section.percentage)}% (${section.score}/${section.maxScore})\n`;
        });
        
        report += '\nRecommendations:\n';
        result.recommendations.forEach(rec => {
          report += `\n${rec.title} (${rec.priority} priority)\n`;
          report += `${rec.description}\n`;
          report += 'Action Items:\n';
          rec.items.forEach(item => report += `- ${item}\n`);
        });
        
        return report;
      },

      generateResultId() {
        return 'result-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
      },

      async createRadarChart() {
        if (!this.assessmentResult) return;

        // Load Chart.js if not available
        if (!window.Chart) {
          const script = document.createElement('script');
          script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
          script.onload = () => this.createRadarChart();
          document.head.appendChild(script);
          return;
        }

        const canvas = document.getElementById('maturityRadarChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        
        // Prepare data for radar chart
        const labels = this.assessmentResult.sectionScores.map(score => 
          this.getSectionTitle(score.sectionId)
        );
        const data = this.assessmentResult.sectionScores.map(score => score.percentage);

        new Chart(ctx, {
          type: 'radar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Current Maturity Level',
              data: data,
              backgroundColor: 'rgba(99, 102, 241, 0.15)',
              borderColor: 'rgba(99, 102, 241, 1)',
              borderWidth: 3,
              pointBackgroundColor: 'rgba(99, 102, 241, 1)',
              pointBorderColor: '#fff',
              pointBorderWidth: 2,
              pointRadius: 6,
              pointHoverBackgroundColor: '#fff',
              pointHoverBorderColor: 'rgba(99, 102, 241, 1)',
              pointHoverRadius: 8
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              r: {
                angleLines: {
                  color: 'rgba(75, 85, 99, 0.3)',
                  lineWidth: 1
                },
                grid: {
                  color: 'rgba(75, 85, 99, 0.3)',
                  lineWidth: 1
                },
                pointLabels: {
                  color: 'rgb(75, 85, 99)',
                  font: {
                    size: 13,
                    weight: '500'
                  },
                  padding: 15
                },
                ticks: {
                  color: 'rgb(107, 114, 128)',
                  backdropColor: 'transparent',
                  min: 0,
                  max: 100,
                  stepSize: 25,
                  font: {
                    size: 11
                  }
                },
                beginAtZero: true
              }
            },
            plugins: {
              legend: {
                display: true,
                position: 'bottom',
                labels: {
                  color: 'rgb(75, 85, 99)',
                  font: {
                    size: 14
                  },
                  padding: 20
                }
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: 'white',
                bodyColor: 'white',
                borderColor: 'rgba(99, 102, 241, 1)',
                borderWidth: 1
              }
            }
          }
        });
      },

      scrollToTop() {
        // Scroll to the assessment engine section smoothly
        const assessmentEngine = document.getElementById('assessment-engine');
        if (assessmentEngine) {
          assessmentEngine.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        } else {
          // Fallback to top of page
          window.scrollTo({ 
            top: 0, 
            behavior: 'smooth' 
          });
        }
      }
    };
  }

  // Make function globally available
  window.assessmentEngine = assessmentEngine;
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>