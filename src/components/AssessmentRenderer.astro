---
// Generic Assessment Renderer - Handles different assessment types
import type { BaseAssessment, AssessmentType } from '../data/assessment-types.ts';

export interface Props {
  assessmentId?: string;
  assessmentType?: AssessmentType;
}

const { assessmentId, assessmentType } = Astro.props;
---

<div 
  id="assessment-renderer"
  x-data="assessmentRenderer()"
  x-init="initializeRenderer()"
>
  <!-- Assessment Loading State -->
  <div x-show="isLoading" class="flex items-center justify-center p-8">
    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
    <span class="ml-3 text-primary-600 dark:text-primary-400">Loading assessment...</span>
  </div>

  <!-- Assessment Selection -->
  <div x-show="!isLoading && !currentAssessment && !showResults" class="space-y-8">
    <div class="grid gap-8 md:grid-cols-2">
      <template x-for="assessment in availableAssessments" :key="assessment.id">
        <div class="group bg-white dark:bg-primary-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-primary-100 dark:border-primary-700 overflow-hidden">
          <!-- Assessment Type Badge -->
          <div class="p-6 pb-4">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-2">
                <div x-show="assessment.type === 'questionnaire'" class="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
                  <span class="text-blue-600 dark:text-blue-400 text-sm font-bold">📊</span>
                </div>
                <div x-show="assessment.type === 'matrix'" class="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center">
                  <span class="text-green-600 dark:text-green-400 text-sm font-bold">🎯</span>
                </div>
                <div class="text-xs font-medium text-primary-500 dark:text-primary-400 uppercase tracking-wide">
                  <span x-text="assessment.type === 'matrix' ? 'Matrix Assessment' : 'Questionnaire'"></span>
                </div>
              </div>
              <span x-text="assessment.category" class="text-xs font-medium bg-primary-100 dark:bg-primary-700 text-primary-600 dark:text-primary-300 px-3 py-1 rounded-full"></span>
            </div>
            
            <h3 class="text-xl font-bold text-primary-900 dark:text-primary-100 mb-3 group-hover:text-accent-600 transition-colors" x-text="assessment.title"></h3>
            <p class="text-primary-600 dark:text-primary-300 text-sm leading-relaxed mb-4" x-text="assessment.description"></p>
            
            <div class="flex items-center text-sm text-primary-500 dark:text-primary-400 mb-6">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span x-text="`${assessment.estimatedTime} minutes`"></span>
            </div>
          </div>
          
          <!-- Action Area -->
          <div class="px-6 pb-6">
            <div class="flex items-center justify-between">
              <button 
                @click="startAssessment(assessment.id, assessment.type)"
                class="flex-1 bg-accent-600 hover:bg-accent-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 mr-3"
              >
                Start Assessment
              </button>
              
              <!-- Resume option if in progress -->
              <button 
                x-show="hasInProgressAssessment(assessment.id)"
                @click="resumeAssessment(assessment.id, assessment.type)"
                class="text-accent-600 hover:text-accent-700 font-medium text-sm transition-colors duration-200 px-3"
              >
                Resume →
              </button>
            </div>
          </div>
        </div>
      </template>
    </div>
  </div>

  <!-- Questionnaire Assessment -->
  <div x-show="currentAssessment && (currentAssessment.type === 'questionnaire' || !currentAssessment.type) && !showResults">
    <div id="questionnaire-assessment" x-html="renderQuestionnaireAssessment()"></div>
  </div>

  <!-- Matrix Assessment -->
  <div x-show="currentAssessment && currentAssessment.type === 'matrix' && !showResults" id="matrix-assessment">
    <div class="max-w-6xl mx-auto">
      <!-- Progress Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100" x-text="currentAssessment?.title"></h2>
          <button @click="saveAndExit()" class="text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors">
            Save & Exit
          </button>
        </div>
        
        <!-- Progress Bar -->
        <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
          <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" :style="`width: ${getMatrixProgress()}%`"></div>
        </div>
        <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
          <span x-text="`${Object.keys(matrixResponses).length} of ${getDimensionCount()} dimensions completed`"></span>
          <span x-text="`${getMatrixProgress()}% complete`"></span>
        </div>
      </div>

      <!-- Instructions -->
      <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6 mb-8" x-show="currentAssessment?.maturityLevels">
        <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-2">How to Use This Assessment</h3>
        <p class="text-primary-600 dark:text-primary-300 mb-3">
          For each dimension below, click on the maturity level that best describes your organization's current state. 
          Read the descriptions carefully to make the most accurate assessment.
        </p>
        <div class="flex flex-wrap gap-4 text-sm">
          <template x-for="level in currentAssessment?.maturityLevels || []" :key="level.id">
            <div class="flex items-center">
              <div class="w-4 h-4 rounded-full mr-2" :style="`background-color: ${level.color}`"></div>
              <span class="font-medium" x-text="level.name"></span>
            </div>
          </template>
        </div>
      </div>

      <!-- Matrix Assessment Grid -->
      <div class="space-y-8">
        <template x-for="dimension in currentAssessment?.dimensions || []" :key="dimension.id">
          <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
            <div class="mb-6">
              <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2" x-text="dimension.title"></h3>
              <p class="text-primary-600 dark:text-primary-300" x-text="dimension.description"></p>
            </div>
            
            <div class="grid gap-3 md:grid-cols-5">
              <template x-for="(level, index) in currentAssessment?.maturityLevels || []" :key="level.id">
                <div class="relative">
                  <button
                    @click="updateMatrixResponse(dimension.id, level.id)"
                    class="w-full p-4 border-2 rounded-lg transition-all duration-200 text-left min-h-[120px]"
                    :class="matrixResponses[dimension.id] === level.id 
                      ? 'border-accent-600 bg-accent-50 dark:bg-accent-900/20 shadow-lg' 
                      : 'border-primary-200 dark:border-primary-600 hover:border-accent-300 hover:bg-primary-50 dark:hover:bg-primary-700'"
                  >
                    <div class="flex items-center mb-2">
                      <div 
                        class="w-4 h-4 rounded-full mr-2" 
                        :style="`background-color: ${level.color}`"
                      ></div>
                      <span class="font-semibold text-sm text-primary-900 dark:text-primary-100" x-text="level.name"></span>
                    </div>
                    <p class="text-xs text-primary-600 dark:text-primary-300 leading-tight" 
                       x-text="currentAssessment?.dimensionDetails?.[dimension.id]?.[level.id] || level.description">
                    </p>
                  </button>
                  
                  <div class="absolute top-2 right-2" x-show="matrixResponses[dimension.id] === level.id">
                    <svg class="w-5 h-5 text-accent-600" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </template>
      </div>

      <!-- Navigation -->
      <div class="flex justify-center mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
        <button 
          @click="completeMatrixAssessment()" 
          :disabled="!isMatrixComplete()"
          class="flex items-center px-8 py-3 bg-green-600 hover:bg-green-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors text-lg font-medium"
        >
          Complete Assessment
        </button>
      </div>
    </div>
  </div>

  <!-- Checklist Assessment -->
  <div x-show="currentAssessment && currentAssessment.type === 'checklist' && !showResults">
    <div id="checklist-assessment" x-html="renderChecklistAssessment()"></div>
  </div>

  <!-- Results Display -->
  <div x-show="showResults && assessmentResult" class="container mx-auto px-4">
    <div id="assessment-results" x-html="renderResults()"></div>
  </div>
</div>

<script is:inline>
  function assessmentRenderer() {
    return {
      isLoading: true,
      availableAssessments: [],
      currentAssessment: null,
      currentAssessmentType: null,
      assessmentResult: null,
      showResults: false,
      
      // Questionnaire-specific state
      currentSectionIndex: 0,
      responses: new Map(),
      
      // Matrix-specific state
      matrixResponses: {},
      
      // Checklist-specific state
      checklistResponses: new Map(),
      
      startTime: null,

      async initializeRenderer() {
        try {
          this.isLoading = true;
          
          // Load available assessments
          const response = await fetch('/tech-leadership/assessments/index.json/');
          this.availableAssessments = await response.json();
          
          // Check for any in-progress assessments
          this.loadInProgressAssessments();
          
        } catch (error) {
          console.error('Failed to initialize assessment renderer:', error);
        } finally {
          this.isLoading = false;
        }
      },

      async startAssessment(assessmentId, assessmentType) {
        try {
          this.isLoading = true;
          
          console.log(`Starting assessment: ${assessmentId} (type: ${assessmentType})`);
          
          // Load the full assessment
          const response = await fetch(`/tech-leadership/assessments/${assessmentId}.json/`);
          
          console.log(`Fetch response status: ${response.status}`);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          this.currentAssessment = await response.json();
          this.currentAssessmentType = assessmentType;
          
          // Initialize assessment state based on type
          this.initializeAssessmentState(assessmentType);
          
        } catch (error) {
          console.error('Failed to start assessment:', error);
          alert(`Failed to load assessment: ${error.message}`);
        } finally {
          this.isLoading = false;
        }
      },

      async resumeAssessment(assessmentId, assessmentType) {
        const progress = this.getInProgressAssessment(assessmentId);
        if (progress) {
          await this.startAssessment(assessmentId, assessmentType);
          
          // Restore progress based on assessment type
          if (assessmentType === 'questionnaire') {
            this.currentSectionIndex = progress.currentSectionIndex || 0;
            this.responses = new Map(progress.responses.map(r => [r.questionId, r.value]));
          } else if (assessmentType === 'matrix') {
            this.matrixResponses = new Map(progress.responses.map(r => [r.questionId, r.value]));
          }
          
          this.startTime = new Date(progress.startedAt);
        }
      },

      initializeAssessmentState(assessmentType) {
        this.showResults = false;
        this.startTime = new Date();
        
        switch (assessmentType) {
          case 'questionnaire':
            this.currentSectionIndex = 0;
            this.responses = new Map();
            break;
          case 'matrix':
            this.matrixResponses = {};
            break;
          case 'checklist':
            this.checklistResponses = new Map();
            break;
        }
      },

      renderQuestionnaireAssessment() {
        if (!this.currentAssessment) return '';
        if (this.currentAssessment.type && this.currentAssessment.type !== 'questionnaire') return '';
        
        const currentSection = this.currentAssessment.sections[this.currentSectionIndex] || null;
        const progressPercentage = Math.round(((this.currentSectionIndex + 1) / this.currentAssessment.sections.length) * 100);
        
        return `
          <div class="max-w-4xl mx-auto">
            <!-- Progress Header -->
            <div class="mb-8">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100">${this.currentAssessment.title}</h2>
                <button onclick="window.assessmentRenderer().saveAndExit()" class="text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors">
                  Save & Exit
                </button>
              </div>
              
              <!-- Progress Bar -->
              <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
                <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" style="width: ${progressPercentage}%"></div>
              </div>
              <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
                <span>Section ${this.currentSectionIndex + 1} of ${this.currentAssessment.sections.length}</span>
                <span>${progressPercentage}% complete</span>
              </div>
            </div>

            <!-- Current Section -->
            ${currentSection ? this.renderQuestionnaireSection(currentSection) : ''}
          </div>
        `;
      },

      renderQuestionnaireSection(section) {
        const questionsHtml = section.questions.map((question, qIndex) => {
          return this.renderQuestion(question, qIndex);
        }).join('');

        return `
          <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-8">
            <div class="mb-6">
              <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2">${section.title}</h3>
              <p class="text-primary-600 dark:text-primary-300">${section.description}</p>
            </div>

            <!-- Questions -->
            <div class="space-y-6">
              ${questionsHtml}
            </div>

            <!-- Navigation -->
            <div class="flex justify-between mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
              ${this.currentSectionIndex > 0 ? `
                <button onclick="window.assessmentRenderer().previousSection()" class="flex items-center px-4 py-2 text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-200 transition-colors">
                  ← Previous Section
                </button>
              ` : '<div></div>'}
              
              ${this.currentSectionIndex < this.currentAssessment.sections.length - 1 ? `
                <button onclick="window.assessmentRenderer().nextSection()" class="flex items-center px-6 py-2 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors">
                  Next Section →
                </button>
              ` : `
                <button onclick="window.assessmentRenderer().completeAssessment()" class="flex items-center px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors">
                  Complete Assessment
                </button>
              `}
            </div>
          </div>
        `;
      },

      renderQuestion(question, qIndex) {
        const currentValue = this.responses.get(question.id) || '';
        
        let inputHtml = '';
        switch (question.type) {
          case 'scale':
            inputHtml = this.renderScaleQuestion(question, currentValue);
            break;
          case 'multiple-choice':
            inputHtml = this.renderMultipleChoiceQuestion(question, currentValue);
            break;
          case 'yes-no':
            inputHtml = this.renderYesNoQuestion(question, currentValue);
            break;
          case 'text':
            inputHtml = this.renderTextQuestion(question, currentValue);
            break;
        }

        return `
          <div class="border-b border-primary-200 dark:border-primary-600 pb-6 last:border-b-0">
            <div class="mb-4">
              <label class="block text-lg font-medium text-primary-900 dark:text-primary-100 mb-2">${question.text}</label>
              ${question.helpText ? `<p class="text-sm text-primary-500 dark:text-primary-400">${question.helpText}</p>` : ''}
            </div>
            ${inputHtml}
          </div>
        `;
      },

      renderScaleQuestion(question, currentValue) {
        const values = Array.from({length: question.max - question.min + 1}, (_, i) => i + question.min);
        
        return `
          <div class="space-y-4">
            <div class="flex justify-between text-sm text-primary-600 dark:text-primary-300 mb-3">
              <span class="font-medium">${question.labels?.[0] || ''}</span>
              <span class="font-medium">${question.labels?.[question.labels.length - 1] || ''}</span>
            </div>
            <!-- Desktop/Tablet Layout -->
            <div class="hidden sm:block">
              <div class="grid grid-cols-5 gap-4 max-w-lg mx-auto">
                ${values.map(value => `
                  <label class="flex flex-col items-center cursor-pointer group">
                    <input 
                      type="radio" 
                      name="${question.id}"
                      value="${value}"
                      onchange="window.assessmentRenderer().updateResponse('${question.id}', ${value})"
                      ${currentValue == value ? 'checked' : ''}
                      class="sr-only"
                    />
                    <div class="w-14 h-14 rounded-full border-2 flex items-center justify-center transition-all duration-200 mb-2 ${currentValue == value ? 'border-accent-600 bg-accent-600 text-white shadow-lg scale-105' : 'border-primary-300 dark:border-primary-600 group-hover:border-accent-400 group-hover:scale-105'}">
                      <span class="text-sm font-semibold">${value}</span>
                    </div>
                    <span class="text-xs text-center text-primary-500 dark:text-primary-400 leading-tight max-w-20 h-8 flex items-center justify-center">${question.labels?.[value - question.min] || ''}</span>
                  </label>
                `).join('')}
              </div>
            </div>
            <!-- Mobile Layout -->
            <div class="sm:hidden space-y-3">
              ${values.map(value => `
                <label class="flex items-center p-3 border rounded-lg cursor-pointer transition-colors ${currentValue == value ? 'border-accent-600 bg-accent-50 dark:bg-accent-900/20' : 'border-primary-200 dark:border-primary-600 hover:border-accent-300'}">
                  <input 
                    type="radio" 
                    name="${question.id}"
                    value="${value}"
                    onchange="window.assessmentRenderer().updateResponse('${question.id}', ${value})"
                    ${currentValue == value ? 'checked' : ''}
                    class="sr-only"
                  />
                  <div class="w-8 h-8 rounded-full border-2 flex items-center justify-center mr-3 flex-shrink-0 ${currentValue == value ? 'border-accent-600 bg-accent-600 text-white' : 'border-primary-300 dark:border-primary-500'}">
                    <span class="text-sm font-medium">${value}</span>
                  </div>
                  <div class="flex-1">
                    <span class="text-sm text-primary-900 dark:text-primary-100">${question.labels?.[value - question.min] || ''}</span>
                  </div>
                </label>
              `).join('')}
            </div>
          </div>
        `;
      },

      renderMultipleChoiceQuestion(question, currentValue) {
        return `
          <div class="space-y-2">
            ${question.options?.map((option, optIndex) => `
              <label class="flex items-center cursor-pointer p-3 rounded-md hover:bg-primary-50 dark:hover:bg-primary-700 transition-colors">
                <input 
                  type="radio" 
                  name="${question.id}"
                  value="${option}"
                  onchange="window.assessmentRenderer().updateResponse('${question.id}', '${option}')"
                  ${currentValue === option ? 'checked' : ''}
                  class="h-4 w-4 text-accent-600 border-primary-300 dark:border-primary-600"
                />
                <span class="ml-3 text-primary-900 dark:text-primary-100">${option}</span>
              </label>
            `).join('') || ''}
          </div>
        `;
      },

      renderYesNoQuestion(question, currentValue) {
        return `
          <div class="flex space-x-6">
            <label class="flex items-center cursor-pointer">
              <input 
                type="radio" 
                name="${question.id}"
                value="yes"
                onchange="window.assessmentRenderer().updateResponse('${question.id}', 'yes')"
                ${currentValue === 'yes' ? 'checked' : ''}
                class="h-4 w-4 text-accent-600 border-primary-300 dark:border-primary-600"
              />
              <span class="ml-2 text-primary-900 dark:text-primary-100">Yes</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <input 
                type="radio" 
                name="${question.id}"
                value="no"
                onchange="window.assessmentRenderer().updateResponse('${question.id}', 'no')"
                ${currentValue === 'no' ? 'checked' : ''}
                class="h-4 w-4 text-accent-600 border-primary-300 dark:border-primary-600"
              />
              <span class="ml-2 text-primary-900 dark:text-primary-100">No</span>
            </label>
          </div>
        `;
      },

      renderTextQuestion(question, currentValue) {
        return `
          <textarea 
            name="${question.id}"
            value="${currentValue}"
            oninput="window.assessmentRenderer().updateResponse('${question.id}', this.value)"
            rows="3"
            class="w-full p-3 border border-primary-300 dark:border-primary-600 rounded-md bg-white dark:bg-primary-700 text-primary-900 dark:text-primary-100 focus:ring-2 focus:ring-accent-500 focus:border-accent-500"
            placeholder="Enter your response..."
          >${currentValue}</textarea>
        `;
      },

      renderMatrixAssessment() {
        if (!this.currentAssessment || (this.currentAssessment.type && this.currentAssessment.type !== 'matrix')) return '';
        
        // Force unwrap the proxy object to get the actual data
        const assessment = JSON.parse(JSON.stringify(this.currentAssessment));
        const dimensions = assessment.dimensions || [];
        const maturityLevels = assessment.maturityLevels || [];
        const dimensionDetails = assessment.dimensionDetails || {};
        
        
        if (dimensions.length === 0 || maturityLevels.length === 0) {
          return `
            <div class="max-w-4xl mx-auto">
              <div class="text-center p-8">
                <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-4">Matrix Assessment Loading...</h2>
                <p class="text-primary-600 dark:text-primary-400">The matrix assessment structure is being loaded. Please check the console for details.</p>
                <div class="mt-4 text-sm text-primary-500">
                  <p>Dimensions: ${dimensions.length}</p>
                  <p>Maturity Levels: ${maturityLevels.length}</p>
                  <p>Dimension Details: ${Object.keys(dimensionDetails).length}</p>
                </div>
              </div>
            </div>
          `;
        }
        
        return `
          <div class="max-w-6xl mx-auto">
            <!-- Progress Header -->
            <div class="mb-8">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100">${assessment.title}</h2>
                <button onclick="window.assessmentRenderer().saveAndExit()" class="text-primary-500 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-200 transition-colors">
                  Save & Exit
                </button>
              </div>
              
              <!-- Progress Bar -->
              <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2 mb-2">
                <div class="bg-accent-600 h-2 rounded-full transition-all duration-300" style="width: ${this.getMatrixProgress()}%"></div>
              </div>
              <div class="flex justify-between text-sm text-primary-600 dark:text-primary-400">
                <span>${this.matrixResponses.size} of ${dimensions.length} dimensions completed</span>
                <span>${this.getMatrixProgress()}% complete</span>
              </div>
            </div>

            <!-- Instructions -->
            <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6 mb-8">
              <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-2">How to Use This Assessment</h3>
              <p class="text-primary-600 dark:text-primary-300 mb-3">
                For each dimension below, click on the maturity level that best describes your organization's current state. 
                Read the descriptions carefully to make the most accurate assessment.
              </p>
              <div class="flex flex-wrap gap-4 text-sm">
                ${maturityLevels.map(level => `
                  <div class="flex items-center">
                    <div class="w-4 h-4 rounded-full mr-2" style="background-color: ${level.color}"></div>
                    <span class="font-medium">${level.name}</span>
                  </div>
                `).join('')}
              </div>
            </div>

            <!-- Matrix Assessment Grid -->
            <div class="space-y-8">
              ${dimensions.map(dimension => this.renderMatrixDimension(dimension, maturityLevels, dimensionDetails[dimension.id])).join('')}
            </div>

            <!-- Navigation -->
            <div class="flex justify-center mt-8 pt-6 border-t border-primary-200 dark:border-primary-600">
              <button 
                onclick="window.assessmentRenderer().completeMatrixAssessment()" 
                ${this.matrixResponses.size < dimensions.length ? 'disabled' : ''}
                class="flex items-center px-8 py-3 bg-green-600 hover:bg-green-700 disabled:bg-primary-300 disabled:cursor-not-allowed text-white rounded-md transition-colors text-lg font-medium"
              >
                Complete Assessment
              </button>
            </div>
          </div>
        `;
      },

      renderChecklistAssessment() {
        if (!this.currentAssessment || this.currentAssessment.type !== 'checklist') return '';
        
        // TODO: Implement checklist assessment rendering
        return `
          <div class="max-w-4xl mx-auto">
            <div class="text-center p-8">
              <h2 class="text-2xl font-bold text-primary-900 dark:text-primary-100 mb-4">Checklist Assessment</h2>
              <p class="text-primary-600 dark:text-primary-400">Checklist assessment rendering coming soon...</p>
            </div>
          </div>
        `;
      },

      renderResults() {
        if (!this.assessmentResult) return '';
        
        if (this.assessmentResult.type === 'matrix') {
          return this.renderMatrixResults();
        } else {
          return this.renderQuestionnaireResults();
        }
      },

      renderMatrixResults() {
        const result = this.assessmentResult;
        
        return `
          <!-- Results Header -->
          <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Results</h1>
            <div class="max-w-2xl mx-auto">
              <h2 class="text-xl text-primary-600 dark:text-primary-400 mb-2">${result.assessmentTitle}</h2>
              <p class="text-sm text-primary-500 dark:text-primary-400">Completed on ${new Date(result.completedAt).toLocaleDateString()}</p>
            </div>
          </div>

          <!-- Overall Score -->
          <div class="grid gap-8 lg:grid-cols-3 mb-12">
            <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
              <div class="text-center">
                <div class="text-5xl font-bold text-accent-600 mb-3">${result.averageLevel}</div>
                <div class="text-xl text-primary-900 dark:text-primary-100 mb-2">Average Maturity Level</div>
                <div class="text-sm text-primary-600 dark:text-primary-300">Out of 5.0</div>
              </div>
            </div>
            
            <!-- Matrix Visualization -->
            <div class="lg:col-span-2 bg-white dark:bg-primary-800 rounded-lg shadow-lg p-8">
              <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-4 text-center">
                Maturity Matrix Overview
              </h3>
              <div class="space-y-3">
                ${result.dimensionScores.map(score => `
                  <div class="flex items-center justify-between p-3 bg-primary-50 dark:bg-primary-700 rounded-lg">
                    <span class="font-medium text-primary-900 dark:text-primary-100">${score.dimensionTitle}</span>
                    <div class="flex items-center">
                      <div class="w-4 h-4 rounded-full mr-2" style="background-color: ${score.levelColor}"></div>
                      <span class="text-sm font-medium text-primary-600 dark:text-primary-300">${score.levelName}</span>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          </div>

          <!-- Dimension Breakdown -->
          <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
            ${result.dimensionScores.map(score => `
              <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
                <h3 class="text-lg font-semibold text-primary-900 dark:text-primary-100 mb-3">${score.dimensionTitle}</h3>
                <div class="flex items-center justify-between mb-2">
                  <span class="text-2xl font-bold" style="color: ${score.levelColor}">${score.level}</span>
                  <span class="text-sm text-primary-500 dark:text-primary-400">${score.levelName}</span>
                </div>
                <div class="w-full bg-primary-200 dark:bg-primary-700 rounded-full h-2">
                  <div 
                    class="h-2 rounded-full"
                    style="width: ${(score.level / 5) * 100}%; background-color: ${score.levelColor}"
                  ></div>
                </div>
              </div>
            `).join('')}
          </div>

          <!-- Recommendations -->
          <div class="space-y-6 mb-8">
            <h3 class="text-2xl font-bold text-primary-900 dark:text-primary-100">Recommendations</h3>
            ${result.recommendations.map(recommendation => `
              <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
                <div class="flex items-start justify-between mb-4">
                  <h4 class="text-xl font-semibold text-primary-900 dark:text-primary-100">${recommendation.title}</h4>
                  <span class="px-3 py-1 rounded-full text-sm font-medium ${this.getPriorityClasses(recommendation.priority)}">
                    ${recommendation.priority} priority
                  </span>
                </div>
                <p class="text-primary-600 dark:text-primary-300 mb-4">${recommendation.description}</p>
                
                <div>
                  <h5 class="font-medium text-primary-900 dark:text-primary-100 mb-2">Key Actions:</h5>
                  <ul class="list-disc list-inside space-y-1 text-sm text-primary-600 dark:text-primary-300">
                    ${recommendation.actions.map(action => `<li>${action}</li>`).join('')}
                  </ul>
                </div>
              </div>
            `).join('')}
          </div>

          <!-- Actions -->
          <div class="flex flex-wrap gap-4 justify-center">
            <button 
              onclick="window.assessmentRenderer().downloadResults('json')"
              class="px-6 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-md transition-colors"
            >
              Download JSON
            </button>
            <button 
              onclick="window.assessmentRenderer().startNewAssessment()"
              class="px-6 py-2 bg-accent-600 hover:bg-accent-700 text-white rounded-md transition-colors"
            >
              Take Another Assessment
            </button>
          </div>
        `;
      },

      renderQuestionnaireResults() {
        // TODO: Implement questionnaire results rendering
        return `
          <div class="text-center p-8">
            <h1 class="text-4xl font-bold text-primary-900 dark:text-primary-100 mb-4">Assessment Results</h1>
            <p class="text-primary-600 dark:text-primary-400">Questionnaire results rendering coming soon...</p>
          </div>
        `;
      },

      getPriorityClasses(priority) {
        switch (priority) {
          case 'high':
            return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
          case 'medium':
            return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';
          case 'low':
            return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
          default:
            return 'bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200';
        }
      },

      downloadResults(format) {
        if (!this.assessmentResult) return;
        
        let content, mimeType, filename;
        
        if (format === 'json') {
          content = JSON.stringify(this.assessmentResult, null, 2);
          mimeType = 'application/json';
          filename = `assessment-${this.assessmentResult.assessmentId}-${new Date().toISOString().split('T')[0]}.json`;
        }
        
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      },

      startNewAssessment() {
        this.currentAssessment = null;
        this.showResults = false;
        this.assessmentResult = null;
        
        // Re-render the assessment selection
        document.getElementById('assessment-renderer').innerHTML = this.renderInitialState();
      },

      renderInitialState() {
        return `
          <div class="space-y-6">
            <div class="text-center">
              <h2 class="text-3xl font-bold text-primary-900 dark:text-primary-100 mb-4">
                Available Assessments
              </h2>
              <p class="text-lg text-primary-600 dark:text-primary-400 max-w-2xl mx-auto">
                Take a comprehensive assessment to evaluate your organization's maturity and receive personalized recommendations.
              </p>
            </div>

            <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              ${this.availableAssessments.map(assessment => `
                <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md hover:shadow-lg transition-shadow p-6">
                  <div class="flex items-start justify-between mb-4">
                    <div class="flex-1">
                      <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2">${assessment.title}</h3>
                      <p class="text-primary-600 dark:text-primary-300 text-sm mb-3">${assessment.description}</p>
                    </div>
                  </div>
                  
                  <div class="flex items-center justify-between text-sm text-primary-500 dark:text-primary-400 mb-4">
                    <span>⏱️ ${assessment.estimatedTime} minutes</span>
                    <span class="bg-primary-100 dark:bg-primary-700 px-2 py-1 rounded">${assessment.category}</span>
                  </div>
                  
                  <div class="flex items-center justify-between">
                    <button 
                      onclick="window.assessmentRenderer().startAssessment('${assessment.id}', '${assessment.type}')"
                      class="bg-accent-600 hover:bg-accent-700 text-white px-4 py-2 rounded-md transition-colors"
                    >
                      Start Assessment
                    </button>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      },

      updateResponse(questionId, value) {
        this.responses.set(questionId, value);
        this.saveProgress();
      },

      nextSection() {
        if (this.isSectionComplete() && this.currentSectionIndex < this.currentAssessment.sections.length - 1) {
          this.currentSectionIndex++;
          this.saveProgress();
          this.scrollToTop();
          // Re-render the component
          document.getElementById('questionnaire-assessment').innerHTML = this.renderQuestionnaireAssessment();
        }
      },

      previousSection() {
        if (this.currentSectionIndex > 0) {
          this.currentSectionIndex--;
          this.scrollToTop();
          // Re-render the component
          document.getElementById('questionnaire-assessment').innerHTML = this.renderQuestionnaireAssessment();
        }
      },

      completeAssessment() {
        if (!this.isSectionComplete()) return;
        
        const result = this.calculateResults();
        this.assessmentResult = result;
        this.showResults = true;
        
        // Save final result
        this.saveAssessmentResult(result);
        
        // Clear progress since it's complete
        this.clearProgress();
      },

      isSectionComplete() {
        if (!this.currentAssessment || this.currentAssessmentType !== 'questionnaire') return false;
        
        const currentSection = this.currentAssessment.sections[this.currentSectionIndex];
        if (!currentSection) return false;
        
        const requiredQuestions = currentSection.questions.filter(q => q.required);
        return requiredQuestions.every(q => this.responses.has(q.id) && this.responses.get(q.id) !== '');
      },

      calculateResults() {
        // TODO: Implement result calculation based on assessment type
        return {
          id: this.generateResultId(),
          assessmentId: this.currentAssessment.id,
          assessmentTitle: this.currentAssessment.title,
          type: this.currentAssessmentType,
          completedAt: new Date(),
          timeSpent: this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0
        };
      },

      saveProgress() {
        if (!this.currentAssessment) return;
        
        const progress = {
          assessmentId: this.currentAssessment.id,
          assessmentType: this.currentAssessmentType,
          currentSectionIndex: this.currentSectionIndex,
          responses: this.currentAssessmentType === 'matrix' 
            ? Object.entries(this.matrixResponses).map(([questionId, value]) => ({
                questionId,
                value,
                timestamp: new Date()
              }))
            : Array.from(this.responses.entries()).map(([questionId, value]) => ({
                questionId,
                value,
                timestamp: new Date()
              })),
          startedAt: this.startTime,
          lastSavedAt: new Date()
        };
        
        localStorage.setItem(`assessment-progress-${this.currentAssessment.id}`, JSON.stringify(progress));
      },

      loadInProgressAssessments() {
        // Load any in-progress assessments from localStorage
        // This could be enhanced to show a list of in-progress assessments
      },

      hasInProgressAssessment(assessmentId) {
        return localStorage.getItem(`assessment-progress-${assessmentId}`) !== null;
      },

      getInProgressAssessment(assessmentId) {
        const progress = localStorage.getItem(`assessment-progress-${assessmentId}`);
        return progress ? JSON.parse(progress) : null;
      },

      saveAssessmentResult(result) {
        const results = JSON.parse(localStorage.getItem('assessment-results') || '[]');
        results.unshift(result);
        localStorage.setItem('assessment-results', JSON.stringify(results.slice(0, 50)));
      },

      saveAndExit() {
        this.saveProgress();
        this.currentAssessment = null;
        this.showResults = false;
      },

      clearProgress() {
        if (this.currentAssessment) {
          localStorage.removeItem(`assessment-progress-${this.currentAssessment.id}`);
        }
      },

      generateResultId() {
        return 'result-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
      },

      scrollToTop() {
        const assessmentRenderer = document.getElementById('assessment-renderer');
        if (assessmentRenderer) {
          assessmentRenderer.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        } else {
          window.scrollTo({ 
            top: 0, 
            behavior: 'smooth' 
          });
        }
      },

      // Matrix Assessment Methods
      renderMatrixDimension(dimension, maturityLevels, dimensionDetail) {
        const currentSelection = this.matrixResponses.get(dimension.id);
        
        return `
          <div class="bg-white dark:bg-primary-800 rounded-lg shadow-md p-6">
            <div class="mb-6">
              <h3 class="text-xl font-semibold text-primary-900 dark:text-primary-100 mb-2">${dimension.title}</h3>
              <p class="text-primary-600 dark:text-primary-300">${dimension.description}</p>
            </div>
            
            <div class="grid gap-3 md:grid-cols-5">
              ${maturityLevels.map((level, index) => {
                const isSelected = currentSelection === level.id;
                const description = dimensionDetail ? dimensionDetail[level.id] || level.description : level.description;
                
                return `
                  <div class="relative">
                    <button
                      onclick="window.assessmentRenderer().updateMatrixResponse('${dimension.id}', '${level.id}')"
                      class="w-full p-4 border-2 rounded-lg transition-all duration-200 text-left min-h-[120px] ${
                        isSelected 
                          ? 'border-accent-600 bg-accent-50 dark:bg-accent-900/20 shadow-lg' 
                          : 'border-primary-200 dark:border-primary-600 hover:border-accent-300 hover:bg-primary-50 dark:hover:bg-primary-700'
                      }"
                    >
                      <div class="flex items-center mb-2">
                        <div 
                          class="w-4 h-4 rounded-full mr-2" 
                          style="background-color: ${level.color}"
                        ></div>
                        <span class="font-semibold text-sm text-primary-900 dark:text-primary-100">${level.name}</span>
                      </div>
                      <p class="text-xs text-primary-600 dark:text-primary-300 leading-tight">
                        ${description}
                      </p>
                    </button>
                    
                    ${isSelected ? `
                      <div class="absolute top-2 right-2">
                        <svg class="w-5 h-5 text-accent-600" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    ` : ''}
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        `;
      },

      updateMatrixResponse(dimensionId, levelId) {
        this.matrixResponses[dimensionId] = levelId;
        this.saveProgress();
      },

      getMatrixProgress() {
        if (!this.currentAssessment) return 0;
        // Force unwrap the proxy object to get the actual data
        const assessment = JSON.parse(JSON.stringify(this.currentAssessment));
        if (!assessment.dimensions) return 0;
        return Math.round((Object.keys(this.matrixResponses).length / assessment.dimensions.length) * 100);
      },

      isMatrixComplete() {
        if (!this.currentAssessment) return false;
        // Force unwrap the proxy object to get the actual data
        const assessment = JSON.parse(JSON.stringify(this.currentAssessment));
        if (!assessment.dimensions) return false;
        return Object.keys(this.matrixResponses).length >= assessment.dimensions.length;
      },

      getDimensionCount() {
        if (!this.currentAssessment) return 0;
        // Force unwrap the proxy object to get the actual data
        const assessment = JSON.parse(JSON.stringify(this.currentAssessment));
        return assessment.dimensions?.length || 0;
      },

      completeMatrixAssessment() {
        // Force unwrap the proxy object to get the actual data
        const assessment = JSON.parse(JSON.stringify(this.currentAssessment));
        
        if (this.matrixResponses.size < assessment.dimensions.length) return;
        
        const result = this.calculateMatrixResults();
        this.assessmentResult = result;
        this.showResults = true;
        
        // Save final result
        this.saveAssessmentResult(result);
        
        // Clear progress since it's complete
        this.clearProgress();
        
        // Results will render automatically via Alpine.js reactivity
      },

      calculateMatrixResults() {
        const responses = Object.entries(this.matrixResponses).map(([dimensionId, levelId]) => {
          const level = this.currentAssessment.maturityLevels.find(l => l.id === levelId);
          return {
            dimensionId,
            levelId,
            levelValue: level ? level.level : 1,
            timestamp: new Date()
          };
        });

        // Calculate dimension scores
        const dimensionScores = responses.map(response => {
          const dimension = this.currentAssessment.dimensions.find(d => d.id === response.dimensionId);
          const level = this.currentAssessment.maturityLevels.find(l => l.id === response.levelId);
          
          return {
            dimensionId: response.dimensionId,
            dimensionTitle: dimension?.title || response.dimensionId,
            level: response.levelValue,
            levelName: level?.name || response.levelId,
            levelColor: level?.color || '#6b7280'
          };
        });

        // Calculate average level
        const averageLevel = dimensionScores.reduce((sum, score) => sum + score.level, 0) / dimensionScores.length;

        // Find applicable recommendations
        const recommendations = this.currentAssessment.scoring.recommendations.filter(rec => {
          if (rec.applicableWhen.averageLevel) {
            return Math.abs(averageLevel - rec.applicableWhen.averageLevel) <= 0.5;
          }
          return true;
        });

        const timeSpent = this.startTime ? Math.round((new Date() - this.startTime) / 60000) : 0;

        return {
          id: this.generateResultId(),
          assessmentId: this.currentAssessment.id,
          assessmentTitle: this.currentAssessment.title,
          type: 'matrix',
          responses,
          dimensionScores,
          averageLevel: Math.round(averageLevel * 10) / 10,
          recommendations,
          completedAt: new Date(),
          timeSpent
        };
      }
    };
  }

  // Make function globally available
  window.assessmentRenderer = assessmentRenderer;
</script>

<style>
  .animate-spin {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>